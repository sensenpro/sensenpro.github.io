<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/JDBC%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <url>/2023/03/25/JDBC%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>JDBC概念:<br>JDBC是使用java语言操作关系型数据库的一套API<br>全称:Java数据库连接（Java DateBase Connectivity）</p><p>JDBC本质：<br>为了在使用同一套Java代码，操作不同的关系型数据库，JDBC诞生，作为一套标准接口，各类数据库通过实现JDBC接口，在java上操作数据库</p><p>各数据厂商实现该接口，提供数据库驱动jar包；使用JDBC真正执行代码的是j驱动ar的实现类</p><p>JDBC好处：<br>        Java代码不需要针对数据库开发，底层数据库随时更改，访问数据库的Java代码基本不变</p><p>创建工程，导入驱动jar包 →注册驱动Class.forName(“com.mysql.jdbc.Driver”)→<br>获取连接Connection conn &#x3D;DriverManager.getConnection(url,username,password);→<br>定义SQL语句String sql &#x3D;”update…”→<br>获取执行SQL对象 Statement stmt &#x3D; conn.createStatement();→<br>执行SQL stmt executeUpdate(sql);→返回处理结果→释放资源</p><p>JBDC API详解:</p><p>DriverManager(驱动管理类)作用:注册驱动，获取数据库连接</p><p>Connection(数据库连接对象)作用:获取执行sql的对象，管理事务</p><p>事务管理：</p><p>开启事务:setAutoCommit(boolean autoCommit)   ture为自动提前事务,false为手动提交事务</p><p>提交事务:commit()</p><p>回滚事务:rollbac()</p><p>Java事务处理方式try catch，在try catch进行事务回滚</p><p>Statement作用:执行sql语句</p><p>int executeUpdate(sql):执行DML,DDL语句     返回值:DML语句影响的行数,DDL语句执行吼,执行成果也可能返回 0</p><p>ResultSet executeQuery(sql):执行DQL语句   返回值:ResultSet结果集对象</p><p> ResultSet(结果集对象)作用:封装了DQL查询语句的结果</p><p>boolean next():判断当前行是否有数据</p><p>xxx getxxx(参数):获取数据</p><p>实现时需要通过while(boolean next()){</p><pre><code class="hljs">    xxx getxxx</code></pre><p>}<br>PreparedStatement作用:<br>预编译SQL语句并执行:预防SQL注入问题。<br>SQL注入:SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法。<br>PreparedStatement作用:<br>预编译SQL并执行SQL语句</p><p>获取PreparedStatement对象<br>String sql &#x3D; “select * from user where username &#x3D; ? and password&#x3D; ?”;<br>PreparedStatement pstmt &#x3D; conn.prepareStatement(sq|);<br>设置参数值<br>PreparedStatement对象: setXxx(参数1， 参数2): 给?赋值<br>Xxx:数据类型;如setInt (参数1,参数2)<br>执行SQL executeUpdate(); &#x2F; executeQuery(); :不需要再传递sql</p><p>数据库连接池简介<br>数据库连接池是个容器，负责分配、管理数据库连接(Connection)<br>它允许应用程序重复使用一个现有的数据库连接,而不是再重新建立一个; .<br>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引|起的数据库连接遗漏<br>好处:资源重用，提升系统响应速度，避免数据库连接遗漏</p><p>数据库连接池实现<br>标准接口: DataSource<br>官方(SUN)提供的数据库连接池标准接口，由第三方组织实现此接口。<br>功能:获取连接<br>Connection getConnection()<br>常见的数据库连接池:<br>DBCP  C3P0  Druid<br>Druid(德鲁伊):<br>Druid连接池是阿里巴巴开源的数据库连接池项目<br>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p><p>Driud使用步骤<br>1 导入jar包druid-1.1.12.jar<br>2 定义配置文件<br>3加载配置文件<br>4获取数据库连接池对象<br>5获取连接</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/jdbc%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/03/25/jdbc%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>案例描述：要求运行主类main方法后，控制台提示输入管理员账号密码登录，登陆成功后显示如下：<br>请您输入编号进行相关书籍管理操作：<br>1、查看书籍列表<br>2、添加书籍<br>3、删除书籍<br>当输入1之后显示全部书籍信息(书籍编号，书籍名称，书籍余量，书籍分类)；<br>查看全部书籍信息后。输入index返回功能页面<br>当输入2之后控制台显示如下：<br>请您输入新书籍的名称：<br>当输入书籍名称之后控制台显示如下：<br>请您输入新书籍的数量：<br>当输入书籍数量之后控制台显示如下：<br>请您输入新书籍的分类：<br>当输入书籍分类之后控制台显示：<br>添加新书籍成功。输入index返回功能页面<br>当输入3之后控制台显示如下：<br>请您输入要删除的书籍的名称：<br>删除指定的书籍成功。输入index返回功能页面</p><h2 id="以上为案例要求"><a href="#以上为案例要求" class="headerlink" title="以上为案例要求"></a>以上为案例要求</h2><p>思路整合：<br>需要使用到数据库，因此要进行jdbc相关操作<br>具体来讲：<br>public static void getConnection(){}<br>首先需要获取连接包括注册驱动，对标url，username，password以获取连接，因此在此之前  定义url，username，password，此外还需要定义一个空的Connection(因为作为案例，中间会多次使用try catch捕获错误 来进行错误整改)<br>public static boolean login(String xxx, String xxx){}<br>其次 根据要求  “控制台提示输入管理员账号密码登录”  我们需要在数据库中建立有关管理员的表  通过上面已经建立起连接(调用方法)，就得创建对象并用sql语句了<br>“select * from xxx(数据库名).xxx(表名) where username(对应表内定义的名字) &#x3D; ‘“ + xxx(该方法的第一个参数)+ “‘ and password(对应表内定义的名字) &#x3D; “ + xxx(该方法的第二个参数) + “ limit 1(此处是为了防止在数据库中查到多条账号和密码相同的信息)”</p><p>此处我的第一个参数我是加了双引号之后又加了单引号 目前还不清楚只加双引号错误的原因。<br>前面获取数据库了，在不使用数据库的时候就要关闭掉，因此还需要写一个public static void shutConnection(){}来在登录后就关闭</p><p>既然登录了  就得判断登录是否成功，得再定义一个标识，用来证明登录成功，并作为返回值</p><p>到此   登录已经结束<br>新建一个java，main方法测试登录是否正常  在main方法中考虑到 不仅这里需要输入账号密码，之后添加书籍还需要舒服四个数据，如果要new 的话 就需要new好几个了  于是乎，考虑在创建一个方法  只用new一个  然后通过掉方法  复用<br>public static Scanner getScanner() {return new Scanner(System.in);</p><p>下面就是如何增删查了<br>同样要去数据库先建立好表，有四个参数，我们就得建立book类，重写toString，还有就是get set方法（注意 这里的四个参数必须和建立的表中的参数一致）</p><p>作为工具类 算是和连接一类了，因此都放在一起<br>查的功能是要返回所有的书籍，因此要用容器来装对象，再将对象sout出来<br>接下来就是定义并执行sql语句<br>“select * from xxx(数据库名).xxx(表名)”<br>因为需要查询所有的书籍，所以用while循环  知道数据库中null<br>举例： book book &#x3D; new book();<br>               book.setId(resultSet.getInt(“id”));<br>               …..<br>               bookList.add(book);</p><p>添加书籍即为set，因为设定为每次只能添加一本书，所以提前做标识，返回被影响的行数赋值给标识</p><p>删除书籍与添加书籍相识   既然删除 就需要找到一个标识，可以定义为书名，之后就是同添加书籍的做法一样了</p><p>再有就是结尾工作了建立一个选项java  用于在输入1，2，3，index时判断进入哪个方法<br>public static void getnum()<br>public static Object panduan(int num)<br>public static void returnIndex(String index)</p><p>综上：<br>main中一个主方法</p><p>book中重写toString    构建get set方法</p><p>工具类 public static void getConnection(){}<br>public static boolean login(String xxx, String xxx){}<br>public static List<book> SelectBook(){}<br>public static Boolean addbook(book book){}<br>public static Boolean deletebook(String bookname){}<br>public static void shutConnection(){}</p><p>选项类public static void getnum()<br>public static Object panduan(int num)<br>public static void returnIndex(String index)<br>public static Scanner getScanner() {return new Scanner(System.in);</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E3%80%90%E6%97%A0%E6%A0%87%E9%A2%98%E3%80%91/"/>
    <url>/2023/03/25/%E3%80%90%E6%97%A0%E6%A0%87%E9%A2%98%E3%80%91/</url>
    
    <content type="html"><![CDATA[<p>1.实现Servlet的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     用来处理客户的请求，并对请求做响应的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().println(<span class="hljs-string">&quot;helloservlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E9%94%99%E8%AF%AF%E5%90%88%E9%9B%86/"/>
    <url>/2023/03/25/%E9%94%99%E8%AF%AF%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>“select * from db1.db2 where username &#x3D; ‘“ + xxx + “‘ and password &#x3D; “ + xxx+ “ limit 1” 未知错误:如果不在第一个外再加单引号会报错。<br>Field ‘id’ doesn’t have a default value  错误纠正:把主键的类型定义为int的,mysql里设置自增。</p><p>解决Cannot determine value type from string ‘xxx’的方法有2种<br>实体加无参构造参数<br>mapper.xml中查询的数据库字段属性的类型要和有参构造器的字段类型一一匹配；查询字段的个数要和有参构造器个数一样</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday01/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday01/</url>
    
    <content type="html"><![CDATA[<p>小程序简介<br>1.运行环境不同<br>网页运行在浏览器环境中<br>小程序运行在微信环境中<br>2. API不同<br>由于运行环境的不同，所以小程序中无法调用DOM和BOM的API<br>但是,小程序中可以调用微信环境提供的各种API<br>例如:地理定位<br>扫码<br>支付<br>3.开发模式不同<br>网页的开发模式:浏览器+代码编辑器<br>小程序有自己的一套标准开发模式:<br>申请小程序开发账号<br>安装小程序开发者工具<br>创建和配置小程序项目</p><p>项目结构:<br>①pages 用来存放所有小程序的页面(重点)<br>②utils 用来存放工具性质的模块(例如:格式化时间的自定义模块)<br>③app.js 小程序项目的入口文件(重点)<br>④app.json 小程序项目的全局配置文件 (重点)<br>⑤app.wxss 小程序项目的全局样式文件<br>⑥project.config.json 项目的配置文件<br>⑦sitemap.json 用来配置小程序及其页面是否允许被微信索引</p><p>page目录中<br>①js 文件(页面的脚本文件,存放页面的数据、事件处理函数等)<br>②.json 文件(当前页面的配置文件，配置窗口的外观、表现等)<br>③.wxml 文件(页面的模板结构文件)<br>④.WXSs 文件(当前页面的样式0表文件)<br>这四个组成一个小程序的页面</p><p>app.json是当前小程序的全局配置，包括了小程序的所有页面路径、窗口外观、界面表现、底部tab等。<br>简单了解下这4个配置项的作用:<br>①pages:用来记录当前小程序所有页面的路径<br>②window: 全局定义小程序所有页面的背景色、文字颜色等<br>③style: 全局定义小程序组件所使用的样式版本<br>④sitemapLocation: 用来指明sitemap.json的位置</p><p>project.config.json是项目配置文件，用来记录我们对小程序开发工具所做的个性化配置。<br>●setting 中保存了编译相关的配置<br>●projectname 中保存的是项目名称<br>●appid 中保存的是小程序的账号ID </p><p>微信现已开放小程序内搜索，效果类似于PC网页的SEO。sitemap.json文件用来配置小程序页面是否允许微信索引。</p><p>注意: sitemap的索引提示是默认开启的，如需要关闭sitemap的索引提示，可在小程序项目配置文件 project.config.json 的setting中配置字段checkSiteMap为false</p><p>小程序中的每一个页面，可以使用json文件来对本页面的窗口外观进行配置，页面中的配置项会覆盖app.json的window中相同的配置项</p><p>新建小程序页面，只需要在app.json -&gt; pages中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件</p><p>修改项目首页，只需要调整app.json -&gt; pages数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页面，当作项目首页进行渲染</p><p>WXML (WeiXin Markup Language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页开发中的HTML<br>WXML和HTML的区别<br>①标签名称不同<br>HTML (div, span, img, a)<br>WXML (view, text, image, navigator)<br>②属性节点不同<br><a href="#">超链接</a><br><navigator url="/pages/home/home"></navigato><br>③提供了类似于Vue中的模板语法<br>数据绑定<br>列表渲染<br>条件渲染</p><p>WXSS (WeiXin Style Sheets)是一套样式语言 ，用于描述WXML的组件样式，类似于网页开发中的CSS。<br>WXSS和CSS的区别<br>①新增了rpx尺寸单位<br>CSS 中需要手动进行像素单位换算,例如rem<br>WXSS 在底层支持新的尺寸单位rpx,在不同大小的屏幕上小程序会自动进行换算<br>②提供了全局的样式和局部样式<br>项目根目录中的app.Wxss会作用于所有小程序页面<br>局部页面的.wXSs样式仅对当前页面生效<br>③WXSS 仅支持部分CSS选择器<br>class 和#id<br>element<br>并集选择器、后代选择器<br>after 和::before等伪类选择器</p><p>小程序中的.js文件<br>一个项目仅仅提供界面展示是不够的，在小程序中，我们通过.js 文件来处理用户的操作。例如:响应用户的点击、获取用户的位置等等。<br>小程序中js文件的分类<br>小程序中的JS文件分为三大类,分别是:<br>①app.js<br>●是整个小程序项目 的入口文件,通过调用App()函数来启动整个小程序<br>②页面的.js 文件<br>●是页面的入口文件, 通过调用Page()函数来创建并运行页面<br>③普通的js文件<br>●是普通的功能模块文件， 用来封装公共的函数或属性供页面使用</p><p>宿主环境(host environment)指的是程序运行所必须的依赖环境。例如:<br>Android系统和ios系统是两个不同的宿主环境。安卓版的微信App是不能在ios环境下运行的，所以Android是安卓软件的宿主环境,脱离了宿主环境的软件是没有任何意义的<br>手机微信是小程序的宿主环境</p><p>程序宿主环境包含的内容（微信为小程序提供的环境）<br>通信模型<br>运行机制<br>组件<br>API</p><p>通信的主体<br>小程序中通信的主体是渲染层和逻辑层，其中:<br>①WXML 模板和WXSS样式工作在渲染层.<br>②JS脚本工作在逻辑层</p><p>小程序的通信模型<br>小程序中的通信模型分为两部分:</p><p>渲染层和逻辑层之间的通信<br>由微信客户端进行转发<br>逻辑层和第三方服务器之间的通信<br>由微信客户端进行转发</p><p>小程序启动的过程<br>①把小程序的代码包下载到本地<br>②解析app.json全局配置文件<br>③执行app.js小程序入口文件，调用App()创建小程序实例<br>④渲染小程序首页<br>⑤小程序启动完成</p><p>页面渲染的过程<br>①加载解析页面的.json 配置文件<br>②加载页面的.wxml模板和.wXSS样式<br>③执行页面的.js 文件，调用Page()创建页面实例<br>④页面渲染完成</p><p>小程序中的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程序的组件分为了9大类，分别是:<br>①视图容器<br>②基础内容<br>③表单组件<br>④导航组件<br>⑤媒体组件<br>⑥map地图组件<br>⑦canvas 画布组件<br>⑧开放能力<br>⑨无障碍访问</p><p>2.常用的视图容器类组件<br>①view<br>普通视图区域<br>类似于 HTML中的div,是一个块级元素<br>常用来实现页面的布局效果<br>②scroll-view<br>可滚动的视图区域<br>常用来实现滚动列表效果<br>③swiper 和 swiper-item<br>轮播图容器组件和轮播图item组件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>1、OS与各层的关系.<br>与硬件的关系:<br>控制CPU的工作<br>访问存储器<br>设备驱动、中断处理</p><p>与用户及应用程序的关系:<br>提供方便的用户界面<br>提供高效的系统管理能力</p><p>2、各层对操作系统的制约<br>下层硬件环境<br>提供OS运行基础;<br>限制了OS的功能实现(如:一个CPU如何 同时处理多个任务)</p><p>上层软件<br>对OS提出要求(如:计算中心每天处理1000个任务，要求吞吐量高)<br>良好的用户界面</p><p><img src="https://img-blog.csdnimg.cn/5eabda3c40924b62a6a9713e51afe984.png" alt="在这里插入图片描述"><br>推动操作系统发展的主要动力<br>1.不断提高计算机资源利用率<br>2.方便用户<br>3.器件的不断更新换代<br>4.计算机体系结构的不断发展<br>5.不断提出新的应用需求</p><p>操作系统: Operating System，简记为OS,是一组控制和管理计算机硬件与软件资源，合理地对各类作业进行调度，以及方便用户使用的程序的集合。<br>主要功能:实现处理机管理、内存管理、I&#x2F;O，设备管理、文件管理以及作业管理。</p><p>无操作系统的计算机系统<br>人工操作方式<br>特点:<br>无任何软件、没有“源程序”的概念<br>用物理地址编程、绝对装入<br>缺点:<br>人机矛盾<br>用户独占全机<br>CPU-_I&#x2F;O设备速度不匹配的矛盾<br>CPU等待人工操作<br>指在慢速的手工操作和高速的计<br>严重浪费系统资源<br>算机运算之间形成的一种矛盾。</p><p>脱机输入&#x2F;输出(Off-Line I&#x2F;O)方式<br>在外围计算机的控制下，实现程序和数据的自动输入输出;这里的脱机是指脱离主机进行的，故称为脱机。<br>输入&#x2F;输出。<br>联机I&#x2F;O:在主机的直接控制下进行的输入&#x2F;输出。<br><img src="https://img-blog.csdnimg.cn/0911d9b7219f4fd0b70fe17de22e7399.png" alt="在这里插入图片描述"></p><p>心单道批处理系统(OS的雏形)<br>在系统中的监督程序的控制下，将一批以脱机方式输入到磁盘上的作业进行处理。<br>特征:<br>自动性   顺序性   单道性<br>缺点: 内存仅有一道作业,   系统资源不能被好地利用。<br><img src="https://img-blog.csdnimg.cn/63ef9a9f73d4437e84af3081d04f9a2b.png" alt="在这里插入图片描述"></p><p>多道批处理系统<br>采用多道程序设计技术的批处理系统称为是多道批处理系统。<br>多道程序设计技术:在内存中同时存放若千个作业,<br>使它们共享系统资源并同时运行的技术，单机环境下，作业仅在宏观上同时运行,微观上交替执行。<br>引入多道程序设计技术可带来以下好处:<br>(1)提高CPU的利用率。<br>(2)可提高内存和I&#x2F;O设备利用率。<br>(3)增加系统吞吐量。<br><img src="https://img-blog.csdnimg.cn/83e5b1c17f554bea883f33c3a4b5e1dc.png" alt="在这里插入图片描述"><br>特征:<br>多道性<br>无序性<br>调度性<br>优缺点:<br>优点:资源利用率高、系统谷吐量大<br>缺点:平均周转时间长、无交互能力<br>周转时间指作业从进入系统开始，直至其完成，并退出系统为止所经历的时间。</p><p>处理机征用问题:既要满足各道程序的需要，又要提高处理机的利用率。<br>内存分配和保护问题:为每道程序提供所需内存空间。<br>I&#x2F;O设备分配问题:分配系统中的I&#x2F;0设备,既要满足用户需要又要提高资源利用率。</p><p>分时系统<br>用户需求主要表现在:<br>人机交互：每个程序员写好程序之后都需要进行调试、修改，因此用户希望能独占<br>全机并直接控制计算机<br>共享主机：一台计算机同时供很多用户使用，但每个人都希望能像独占时一样，与计算机随时交互，并且不会感觉到其他用户存在。</p><p>分时系统实现中的关键问题<br>及时接收（多路卡、缓冲区）<br>及时处理（直接进入内存、分配时间片）<br>特点：多路性  交互性   独占性  及时性</p><p>实时系统<br>实时系统是指系统能及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行 。</p><p>实时操作系统的分类：实时控制系统  实时信息处理系统  多媒体系统</p><p>实时任务的类型：<br>按执行任务是否呈现周期性：<br>周期任务：按指定的周期循环执行，如工业流水线<br>非周期任务：任务执行无明显周期性，但必须截止一个时间<br>开始截止时间<br>完成截止时间<br>根据对截止时间的划分：<br>硬实时任务：必须满足任务对截止时间的要求，否则后果难以预测。<br>软实时要求：也有一个截止时间，但并不严格</p><p>特点：<br>多路性<br>独立性<br>交互性<br> 及时性<br> 可靠性</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday03/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday03/</url>
    
    <content type="html"><![CDATA[<p>bindinput的语法格式<br>在小程序中，通过input事件来响应文本框的输入事件，语法格式如下:<br>①通过bindinput,可以为文本框绑定输入事件:<br>&lt;input bindinput&#x3D; ”inputHandler”&gt;<input><br>②在页面的js文件中定义事件处理函数:<br>inputHandler(e) {&#x2F;&#x2F; e.detail.value 是变化过后，文本框最新的值<br>console. log(e.detail.value)<br>}</p><p>实现文本框和data之间的数据同步<br>实现步骤:<br>①定义数据<br>②渲染结构<br>③美化样式<br>④绑定input事件处理函数</p><p>wx:if<br>在小程序中，使用wx:if&#x3D;”{condition}}”来判断是否需要渲染该代码块:<br> <view wx:if=""> True </view><br>也可以用wx:elif和Wx:else来添加else判断:<br><view wx:if="false"> 男</view><br><view wx:elif="false"> 女</view><br>&lt;view wx:elsex 保密</view></p><p>结合<block>使用wx:if<br>如果要一次性控制多个组件的展示与隐藏，可以使用-个<block></block>标签将多个组件包装起来，并在<br><block>标签上使用wx:if控制属性，示例如下:<br><block wx:if="true"><br><view> view1 </view><br><view> view2 </view><br></block><br><block> 并不是一个组件, 它只是一个包裹性质的容器， 不会在页面中做任何渲染。</p><p>hidden<br>在小程序中，直接使用hidden&#x3D;”“也能控制元素的显示与隐藏:<br><view hidden=""> 条件为true隐藏，条件为false 显示</view></p><p>wx:if与hidden的对比<br>①运行方式不同<br>wx:if 以动态创建和移除元素的方式，控制元素的展示与隐藏<br>hidden 以切换样式的方式(display: none&#x2F;block;)，控制元素的显示与隐藏<br>②使用建议<br>频繁切换时， 建议使用hidden<br>控制条件复 杂时,建议使用wx:if搭配wx:elif、wx:else 进行展示与隐藏的切换</p><p>wx:for<br>通过wx:for可以根据指定的数组,循环渲染重复的组件结构，语法示例如下:<br><view wx:for=""><br>索引是:  当前项是: <br></view><br>默认情况下，当前循环项的索引用index表示;当前循环项用item表示。</p><p>wx:key的使用<br>类似于Vue列表渲染中的:key,小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的key值,<br>从而提高渲染的效率，示例代码如下:<br>&#x2F;&#x2F; data数据<br>data:<br>userL ist: [<br>{ id: 1, name: ‘小红’ },<br>{ id: 2, name: ‘小黄’ },<br>{ id: 3, name: ‘小白’ }<br>]<br>}<br>&#x2F;&#x2F; wxml 结构<br><view wx:for=" " wx:key=" id"></view></p><p>WXSS和CsS的关系，<br>WXSS具有CSS大部分特性，同时，WXSS还对CSS进行了扩充以及修改，以适应微信小程序的开发。<br>与CSS相比，WXSS扩展的特性有:<br>rpx尺寸单位<br>@import样式导入</p><p>rpx的实现原理非常简单:鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx把所有设备的屏幕,在宽度上等分为750份(即:当前屏幕的总宽度为750rpx)。在较小的设备上，1rpx 所代表的宽度较小，在较大的设备上， 1rpx所代表的宽度较大，小程序在不同设备上运行的时候，会自动把rpx的样式单位换算成对应的像素单位来渲染,从而实现屏幕适配。</p><p>@import的语法格式<br>@import后跟需要导入的外联样式表的相对路径，用;表示语句结束</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday05/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday05/</url>
    
    <content type="html"><![CDATA[<p>页面配置文件的作用<br>小程序中，每个页面都有自己的.json 配置文件,用来对当前页面的窗口外观、页面效果等进行配置。</p><p>页面配置和全局配置的关系<br>小程序中，app.json中的window节点，可以全局配置小程序中每个页面的窗口表现。<br>如果某些小程序页面想要拥有特殊的窗口表现，此时，“页面级别的 json配置文件”就可以实现这种需求。<br>注意:当页面配置与全局配置冲突时，根据就近原则,最终的效果以页面配置为准。</p><p>页面配置中常用的配置项<img src="https://img-blog.csdnimg.cn/0e8960af549b49cfba0673cc8cab7dd7.png" alt="在这里插入图片描述"><br>小程序中网络数据请求的限制<br>出于安全性方面的考虑，小程序官方对数据接口的请求做出了如下<br>两个限制:<br>①只能请求HTTPS类型的接口<br>②必须将接口的域名添加到信任列表中</p><p>配置request合法域名<br>配置步骤:登录微信小程序管理后台-&gt;开发-&gt;开发设置-&gt;服务器域名-&gt;修改request合法域名<br>注意事项:<br>①域名只支持https协议<br>②域名不能使用IP地址或localhost<br>③域名必须经过ICP备案<br>④服务器域名一个月内最多可申请5次修改</p><p>发起GET请求<br>调用微信小程序提供的wx.request()方法，可以发起GET数据请求<br>发起POST请求url: ‘ ‘  &#x2F;&#x2F;请求的接口地址，必须基于https 协议<br>method:’GET’&#x2F;&#x2F;请求的方式<br>date:{}&#x2F;&#x2F;发送到服务器的数据<br>success: (res) &#x3D;&gt; { <br>    consolelog(res)<br>    }&#x2F;&#x2F;请求成功之后的回调函数<br>调用微信小程序提供的wx.request()方法，可以发起POST数据请求<br>url: ‘ ‘  &#x2F;&#x2F;请求的接口地址，必须基于https 协议<br>method:’POST’&#x2F;&#x2F;请求的方式<br>date:{}&#x2F;&#x2F;发送到服务器的数据<br>success: (res) &#x3D;&gt; { <br>    consolelog(res)<br>    }&#x2F;&#x2F;请求成功之后的回调函数</p><p>在页面刚加载时请求数据<br>在很多情况下，我们需要在页面刚加载的时候，自动请求一些初始化的数据。此时需要在页面的onLoad事件中调用获取数据的函数</p><p>跳过request合法域名校验<br>如果后端程序员仅仅提供了http协议的接口、暂时没有提供https协议的接口。<br>此时为了不耽误开发的进度，我们可以在微信开发者工具中，临时<br>开启「开发环境不校验请求域名、TLS版本及HTTPS证书」选项,<br>跳过request合法域名的校验。</p><p>关于跨域和Ajax的说明<br>跨域问题只存在于基于浏览器的Web开发中。由于小程序的宿主环境不是浏览器，而是微信客户端，所以小程序中不存在跨域的问题。<br>Ajax技术的核心是依赖于浏览器中的XMLHttpRequest这个对象，由于小程序的宿主环境是微信客户端，所以小程序中不能叫做“发起Ajax请求”,而是叫做“发起网络数据请求’</p><p>案例<br><img src="https://img-blog.csdnimg.cn/b90a3d4a0d524d84a36736fe0297608f.png" alt="在这里插入图片描述"><br>app.json<br><code>&#123;   &quot;pages&quot;:[     &quot;pages/home/home&quot;,     &quot;pages/message/message&quot;,     &quot;pages/contact/contact&quot;   ],   &quot;window&quot;:&#123;     &quot;backgroundTextStyle&quot;:&quot;light&quot;,     &quot;navigationBarBackgroundColor&quot;: &quot;#2b4b6b&quot;,     &quot;navigationBarTitleText&quot;: &quot;本地生活&quot;,     &quot;navigationBarTextStyle&quot;:&quot;white&quot;   &#125;,   &quot;tabBar&quot;: &#123;     &quot;list&quot;: [&#123;       &quot;pagePath&quot;: &quot;pages/home/home&quot;,       &quot;text&quot;: &quot;首页&quot;,       &quot;iconPath&quot;: &quot;/pages/img/home.png&quot;,       &quot;selectedIconPath&quot;: &quot;/pages/img/home2.png&quot;     &#125;,&#123;       &quot;pagePath&quot;: &quot;pages/message/message&quot;,       &quot;text&quot;: &quot;多人&quot;,       &quot;iconPath&quot;: &quot;/pages/img/众多用户.png&quot;,       &quot;selectedIconPath&quot;: &quot;/pages/img/众多用户(1).png&quot;     &#125;,&#123;       &quot;pagePath&quot;: &quot;pages/contact/contact&quot;,       &quot;text&quot;: &quot;更多&quot;,       &quot;iconPath&quot;: &quot;/pages/img/更多2.png&quot;,       &quot;selectedIconPath&quot;: &quot;/pages/img/更多2(1).png&quot;     &#125;]   &#125;,   &quot;style&quot;: &quot;v2&quot;,   &quot;sitemapLocation&quot;: &quot;sitemap.json&quot; &#125; </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// pages/home/home.js</span><br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br>      swiperList:[],<br>      jggList:[]<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br><span class="hljs-built_in">this</span>.getSwiperList(),<br><span class="hljs-built_in">this</span>.getjggList() <br>  &#125;,<br>  getSwiperList()&#123;<br>wx.request(&#123;<br>  url: <span class="hljs-string">&#x27;https://www.escook.cn/slides&#x27;</span>,<br>  method:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>  success:(res)=&gt;&#123;<br>    console.log(res)<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      swiperList:res.data<br>    &#125;)<br>  &#125;<br>&#125;)<br>  &#125;,<br>  getjggList()&#123;<br>wx.request(&#123;<br>  url: <span class="hljs-string">&#x27;https://www.escook.cn/categories&#x27;</span>,<br>  method:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>  success:(res)=&gt;&#123;<br>    console.log(res)<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      jggList:res.data<br>    &#125;)<br>  &#125;<br>&#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--pages/home/home.wxml--&gt;<br>&lt;swiper indicator-dots circular&gt;<br>  &lt;swiper-item wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;id&quot;</span>&gt;<br>    &lt;image src=<span class="hljs-string">&quot;&#123;&#123;item.image&#125;&#125;&quot;</span>&gt;&lt;/image&gt;<br>  &lt;/swiper-item&gt;<br>&lt;/swiper&gt;<br>&lt;view class=<span class="hljs-string">&quot;grid-list&quot;</span>&gt;<br>  &lt;view class=<span class="hljs-string">&quot;grid-item&quot;</span> wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;jggList&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;id&quot;</span>&gt;<br>    &lt;image src=<span class="hljs-string">&quot;&#123;&#123;item.icon&#125;&#125;&quot;</span>&gt;&lt;/image&gt;<br>    &lt;text&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;<br>  &lt;/view&gt;<br>&lt;/view&gt;<br>&lt;view class=<span class="hljs-string">&quot;img-box&quot;</span>&gt;<br>&lt;image src=<span class="hljs-string">&quot;&quot;</span> mode=<span class="hljs-string">&quot;widthFix&quot;</span>&gt;&lt;/image&gt;<br>&lt;image src=<span class="hljs-string">&quot;&quot;</span> mode=<span class="hljs-string">&quot;widthFix&quot;</span>&gt;&lt;/image&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* pages/home/home.wxss */</span><br>swiper&#123;<br>  height: 350rpx;<br>&#125;<br><br>swiper image&#123;<br>  width: <span class="hljs-number">100</span>%;<br>  height: <span class="hljs-number">100</span>%;<br>&#125;<br>.grid-list&#123;<br>  display: flex;<br>  flex-wrap: wrap;<br>  border-left: 1rpx solid #efefef;<br>  border-top: 1rpx solid #efefef;<br>&#125;<br>.grid-item&#123;<br>  width: <span class="hljs-number">33.33</span>%;<br>  height: 200rpx;<br>  display: flex;<br>  flex-direction: column;<br>  align-content: center;<br>  align-items: center;<br>  border-right: 1rpx solid #efefef;<br>  border-bottom: 1rpx solid #efefef;<br>  box-sizing: border-box;<br>&#125;<br>.grid-item image&#123;<br>  width: 60rpx;<br>  height: 60rpx;<br>&#125;<br>.grid-item text&#123;<br>  font-size: 24rpx;<br>  margin-top: 10rpx;<br>&#125;<br>.img-box&#123;<br>  display: flex;<br>  padding: 20rpx 10rpx;<br>  justify-content: space-around;<br>&#125;<br>.img-box image&#123;<br>  width: <span class="hljs-number">45</span>%;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday04/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday04/</url>
    
    <content type="html"><![CDATA[<p>全局样式<br>定义在app.wxss中的样式为全局样式，作用于每一个页面。<br>局部样式<br>在页面的.wXss文件中定义的样式为局部样式，只作用于当前页面。<br>注意:<br>①当局部样式和全局样式冲突时,根据就近原则，局部样式会覆盖全局样式<br>②当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局的样式</p><p>全局配置文件及常用的配置项<br>小程序根目录下的app.json文件是小程序的全局配置文件。常用的配置项如下:<br>①pages<br>记录当 前小程序所有页面的存放路径<br>②window<br>全局设置小程序窗 口的外观<br>③tabBar<br>设置小程序底部的 tabBar 效果<br>④style<br>是否启用新版的组件样式<img src="https://img-blog.csdnimg.cn/a1d3300325ed49778af387c453598c52.png" alt="在这里插入图片描述"><br>window主要用来配置navigationBar和background<br>了解window节点常用的配置项<br><img src="https://img-blog.csdnimg.cn/24a688c9f4b7411da026599842fba755.png" alt="在这里插入图片描述">设置导航栏的标题<br>设置步骤: app.json -&gt; window -&gt; navigationBarTitleText<br>设置导航栏的背景色<br>设置步骤: app.json -&gt; window -&gt; navigationBarBackgroundColor<br>设置导航栏的标题颜色<br>设置步骤: app.json -&gt; window -&gt; navigationBarTextStyle<br>注意: navigationBarTextStyle 的可选值只有black和white</p><p>全局开启下拉刷新功能<br>概念:下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行为。<br>设置步骤: app.json -&gt; window -&gt;把enablePullDownRefresh的值设置为true</p><p>设置下拉刷新时窗口的背景色<br>当全局开启下拉刷新功能之后，默认的窗口背景为白色。如果自定义下拉刷新窗口背景色，设置步骤为:<br>app.json -&gt; window -&gt;为backgroundColor指定16进制的颜色值</p><p>设置下拉刷新时loading的样式<br>当全局开启下拉刷新功能之后,默认窗口的loading样式为白色，如果要更改loading样式的效果，设置步<br>骤为app.json -&gt; window -&gt;为backgroundTextStyle指定dark值。效果如下:<br>注意: backgroundTextStyle 的可选值只有light 和dark</p><p>设置上拉触底的距离<br>概念:上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。<br>设置步骤: app.json -&gt; window -&gt;为onReachBottomDistance设置新的数值</p><p>tabBar是移动端应用常见的页面效果，用于实现多页面<br>的快速切换。小程序中通常将其分为:<br>底部tabBar<br>顶部tabBar<br>注意:<br>tabBar中只 能配置最少2个、最多5个tab页签<br>当渲染顶部tabBar 时，不显示icon,只显示文本</p><p>taBar的6个组成部分<br><img src="https://img-blog.csdnimg.cn/3cb3133dbd1e4147afa488d0ae872739.png" alt="在这里插入图片描述">①backgroundColor: tabBar的背景色<br>②selectedlconPath: 选中时的图片路径<br>③borderStyle: tabBar. 上边框的颜色<br>④iconPath: 未选中时的图片路径<br>⑤selectedColor: tab. 上的文字选中时的颜色<br>⑥color: tab. 上文字的默认(未选中)颜色</p><p>taBar节点的配置项<br><img src="https://img-blog.csdnimg.cn/d91415372fa34ed78c76e3a5f79382e5.png" alt="在这里插入图片描述">每个tab项的配置选项<br><img src="https://img-blog.csdnimg.cn/69423e983fb44162a947a9e59f16763e.png" alt="在这里插入图片描述">实现步骤<br>(1)拷贝图标资源<br>①把资料目录中的images文件夹，拷贝到小程序项目根目录中<br>②将需要用到的小图标分为3组，每组两个，其中:<br>图片名 称中包含-active的是选中之后的图标<br>图片名称中不包含-active的是默认图标<br>(2)新建3个对应的tab页面<br><img src="https://img-blog.csdnimg.cn/4020afeaf51d4b2aab0eb78de65b0466.png" alt="在这里插入图片描述"><br>(3)配置tabBar选项<br>(1)打开app.json配置文件，和pages、window平级，新增tabBar节点<br>(2)tabBar 节点中，新增list数组，这个数组中存放的，是每个tab项的配置对象<br>(3)在list数组中，新增每一个tab项的配置对象。对象中包含的属性如下:<br>①pagePath 指定当前tab对应的页面路径[必填]<br>②text 指定当前tab.上按钮的文字[必填]<br>③iconPath 指定当前tab未选中时候的图片路径[可选]<br>④selectedlconPath 指定当前tab被选中后高亮的图片路径[ 可选]</p><p>tabBar界面要放在首位</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday06/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday06/</url>
    
    <content type="html"><![CDATA[<p>小程序中实现页面导航的两种方式<br>①声明式导航<br>在页面上声明一个<navigator>导航组件<br>通过点击<navigator> 组件实现页面跳转<br>②编程式导航<br>调用小程序的导航API,实现页面的跳转</p><p>导航到tabBar页面<br>tabBar页面指的是被配置为tabBar的页面。<br>在使用<navigator>组件跳转到指定的tabBar页面时，需要指定url属性和open-type属性,其中:<br>url表示要跳转的页面的地址，必须以&#x2F;开头<br>open-type 表示跳转的方式，必须为switchTab</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;navigator url=<span class="hljs-string">&quot;/pages/message/message&quot;</span> open-type=<span class="hljs-string">&quot;switchTab&quot;</span>&gt;点击跳转&lt;/navigator&gt;<br></code></pre></td></tr></table></figure><p>导航到非tabBar页面<br>非tabBar页面指的是没有被配置为tabBar的页面。<br>在使用<navigator>组件跳转到普通的非tabBar页面时，则需要指定url属性和open-type属性，其中:<br>url 表示要跳转的页面的地址，必须以&#x2F;开头<br>open-type 表示跳转的方式，必须为navigate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;navigator url=<span class="hljs-string">&quot;/pages/info/info&quot;</span> open-type=<span class="hljs-string">&quot;navigate&quot;</span>&gt;点击跳转到非tabBar页面&lt;/navigator&gt;<br></code></pre></td></tr></table></figure><p>为了简便,在导航到非tabBar页面时，open-type&#x3D;”navigate” 属性可以省略。</p><p>后退导航<br>如果要后退到上一页面或多级页面，则需要指定open-type属性和delta属性，其中:<br>open-type 的值必须是navigateBack,表示要进行后退导航<br>delta 的值必须是数字，表示要后退的层级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;navigator open-type=<span class="hljs-string">&quot;navigateBack&quot;</span> delte=<span class="hljs-string">&quot;1&quot;</span>&gt;后退&lt;/navigator&gt;<br></code></pre></td></tr></table></figure><p>为了简便，如果只是后退到上- -页面，则可以省略delta属性，因为其默认值就是1。</p><p>编程式导航<br>1.导航到tabBar页面<br>调用wx.switchTab(Object object)方法，可以跳转到tabBar页面。其中Object参数对象的属性列表如下:<img src="https://img-blog.csdnimg.cn/2613097453374a159321036578f2a7f8.png" alt="在这里插入图片描述">导航到非tabBar页面<br>调用wx.navigateTo(Object object)方法,可以跳转到非tabBar的页面。其中Object参数对象的属性列表<br><img src="https://img-blog.csdnimg.cn/f423fa0e571e4b4a99d996433a26410e.png" alt="在这里插入图片描述">后退导航<br>调用wx.navigateBack(Object object)方法，可以返回上一-页面或多级页面。其中Object参数对象可选的<img src="https://img-blog.csdnimg.cn/fbe563f06e774117a303b56cf46d8e59.png" alt="在这里插入图片描述">声明式导航传参<br>navigator组件的url属性用来指定将要跳转到的页面的路径。同时，路径的后面还可以携带参数:<br>参数与路径之间使用?分隔<br>参数键与参数值用&#x3D;相连<br>不同参数用&amp;分隔<br><navigator url="/pages/info/info?name=zs&age=20">跳转传参</navigator></p><p>编程式导航传参<br>调用wx.navigateTo(Object object)方法跳转页面时，也可以携带参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里是wxml里的</span><br>&lt;button bindtap=<span class="hljs-string">&quot;gotoinfo2&quot;</span>&gt;点击传参&lt;/button&gt;<br><span class="hljs-comment">//这里是js文件里的</span><br>gotoinfo2()&#123;<br>    wx.navigateTo(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/info/info?name=zs&amp;age=12&#x27;</span>,<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><p>下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行为。</p><p>启用下拉刷新<br>启用下拉刷新有两种方式:<br>①全局开启下拉刷新<br>在app.json的window节点中，将enablePullDownRefresh设置为true<br>②局部开启下拉刷新<br>在页面的.json配置文件中，将enablePullDownRefresh设置为true</p><p>配置下拉刷新窗口的样式<br>在全局或页面的.json配置文件中，通过backgroundColor和backgroundTextStyle来配置下拉刷新窗口<br>的样式，其中:<br>backgroundColor用来配置下拉刷新窗口的背景颜色，仅支持16进制的颜色值<br>backgroundTextStyle用来配置下拉刷新loading的样式，仅支持dark和light</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday07/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday07/</url>
    
    <content type="html"><![CDATA[<p> 停止下拉刷新的效果<br>当处理完下拉刷新后，下拉刷新的loading效果会一直 显示，不会主动消失，所以需要手动隐<br>loading效果。此时，调用wx.stopPullDownRefresh()可以停止当前页面的下拉刷新</p><p>上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。<br>监听页面的上拉触底事件<br>在页面的.js文件中，通过onReachBottom()函数即可监听当前页面的.上拉触底事件。</p><p>配置上拉触底距离<br>上拉触底距离指的是触发上拉触底事件时，滚动条距离页面底部的距离。<br>可以在全局或页面的.json 配置文件中，通过onReachBottomDistance属性来配置.上拉触底的距离。<br>小程序默认的触底距离是50px,在实际开发中,可以根据自己的需求修改这个默认值。</p><p>添加loading提示效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">getcolors() &#123;<br>    wx.showLoading(&#123;<br>      title: <span class="hljs-string">&#x27;数据加载中...&#x27;</span>,<br>    &#125;)<br>    wx.request(&#123;<br>      url: <span class="hljs-string">&#x27;http://www.escook.cn/api/color&#x27;</span>,<br>      method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      success: (&#123;<br>        data: res<br>      &#125;) =&gt; &#123;<br>        <span class="hljs-built_in">this</span>.setData(&#123;<br>          colorList: [...<span class="hljs-built_in">this</span>.data.colorList, ...res.data]<br>        &#125;)<br>      &#125;,<br>      complete: () =&gt; &#123;<br>        wx.hideLoading(&#123;&#125;)<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><p>对上拉触底进行节流处理<br>①在data中定义isloading节流阀<br>false 表示当前没有进行任何数据请求<br>true 表示当前正在进行数据请求<br>②在getColors()方法中修改isloading节流阀的值<br>在刚调用getColors时将节流阀设置true<br>在网络请求的complete回调函数中,将节流阀重置为false<br>③在onReachBottom中判断节流阀的值，从而对数据请求进行节流控制<br>如果节流阀的值为true,则阻止当前请求<br>如果节流阀的值为false,则发起数据请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先定义isloding</span><br>  data: &#123;<br>    isloding: <span class="hljs-literal">false</span><br>  &#125;,<br><span class="hljs-comment">//在需要判定时先改为true</span><br><span class="hljs-built_in">this</span>.setData(&#123;<br>      isloding: <span class="hljs-literal">true</span><br>    &#125;)<br><span class="hljs-comment">//判定结束重新改回isloding的值</span><br>complete: () =&gt; &#123;<br>        wx.hideLoading(&#123;&#125;)<br>        <span class="hljs-built_in">this</span>.setData(&#123;<br>          isloding: <span class="hljs-literal">false</span><br>        &#125;)<br></code></pre></td></tr></table></figure><p>自定义编译模式，添加自定义编译模式</p><p>生命周期(Life Cycle)是指一一个对象从创建-&gt;运行-&gt;销毁的整个阶段，强调的是一个时间段。例如:我们可以把每个小程序运行的过程，也概括为生命周期:<br>●小程序的启动,表示生命周期的开始<br>●小程序的关闭，表示生命周期的结束<br>●中间小程序运行的过程，就是小程序的生命周期<br>生命周期的分类<br>在小程序中，生命周期分为两类，分别是:<br>①应用生命周期<br>●特指小程序从启动-&gt;运行-&gt;销毁的过程<br>②页面生命周期<br>●特指小程序中，每个页面的加载-&gt;渲染-&gt;销毁的过程</p><p>其中，页面的生命周期范围较小，应用程序的生命周期范围较大，如图所示:<img src="https://img-blog.csdnimg.cn/20363c6ea05f41f8ad7c310f7182fd4e.png" alt="在这里插入图片描述">生命周期函数:是由小程序框架提供的内置函数,会伴随着生命周期，自动按次序执行。<br>生命周期函数的作用:允许程序员在特定的时间点，执行某些特定的操作。例如，页面刚加载的时候，可以在onLoad生命周期函数中初始化页面的数据<br>生命周期函数的分类<br>小程序中的生命周期函数分为两类，分别是:<br>①应用的生命 周期函数<br>●特指小程序从启动-&gt;运行-&gt;销毁期间依次调用的那些函数<br>②页面的生命 周期函数<br>●特指小程序中，每个页面从加载-&gt;渲染-&gt;销毁期间依次调用的那些函数</p><p>应用的生命周期函数<br>小程序的应用生命周期函数需要在app.js中进行声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">App(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span><br><span class="hljs-comment">   */</span><br>  onLaunch: function () &#123;<br>    <br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当小程序启动，或从后台进入前台显示，会触发 onShow</span><br><span class="hljs-comment">   */</span><br>  onShow: function (options) &#123;<br>    <br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当小程序从前台进入后台，会触发 onHide</span><br><span class="hljs-comment">   */</span><br>  onHide: function () &#123;<br>    <br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</span><br><span class="hljs-comment">   */</span><br>  onError: function (msg) &#123;<br>    <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>页面的生命周期函数<br>小程序的页面生命周期函数需要在页面的.js文件中进行声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>WXS (WeiXin Script)是小程序独有的一套脚本语言,结合WXML,可以构建出页面的结构。<br>wxs的应用场景<br>wxml中无法调用在页面的js中定义的函数,但是, wxml中可以调用WXS中定义的函数。因此，小程序中<br>wxs的典型应用场景就是“过滤器”</p><p>wxs和JavaScript的关系*<br>虽然WXS的语法类似于JavaScript,但是WXS和JavaScript是完全不同的两种语言:<br>①wXS 有自己的数据类型<br>number数值类型、string 字符串类型、boolean布尔类型、object 对象类型、<br>function 函数类型、array 数组类型、date 日期类型、<br>regexp正则<br>②wxs 不支持类似于ES6及以上的语法形式<br>不支持: let、 const、 解构赋值、展开运算符、箭头函数、对象属性简写、etc…<br>支持: var定义变量、普通function函数等类似于ES5的语法<br>③WXS 遵循CommonJS规范<br>module对象<br>require() 函数<br>module.exports对象</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday08/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday08/</url>
    
    <content type="html"><![CDATA[<p>内嵌wxs脚本<br>wxs代码可以编写在wxml文件中的<wxs>标签内，就像Javascript代码可以编写在html文件中的<script>标签内一样。<br>wxml文件中的每个<wxs></wxs>标签,必须提供module属性,用来指定当前wxs的模块名称，方便在<br>wxml中访问模块中的成员:<br>定义外联的wxs脚本<br>WxS代码还可以编写在以.WXS为后缀名的文件内，就像javascript代码可以编写在以js为后缀名的文件中一样。<br>使用外联的WXs脚本<br>在wxml中引入外联的wxs脚本时，必须为<wxs>标签添加module和src属性,其中:<br>module 用来指定模块的名称<br>src用来指定要引入的脚本的路径，且必须是相对路径</p><p>wxs与JavaScript不同<br>为了降低wxs (WeiXin Script)的学习成本，wxs 语言在设计时借大量鉴了JavaScript的语法。但是本质上wxs和JavaScript是完全不同的两种语言!<br>不能作为组件的事件回调<br>WXS典型的应用场景就是“过滤器”<br>经常配合Mustache语法进行使用<br>隔离性<br>隔离性指的是WXS的运行环境和其他JavaScript代码是隔离的。体现在如下两方面:<br>①wXS不能调用js中定义的函数<br>②WXS不能调用小程序提供的API<br>性能好<br>在ioS设备.上,小程序内的WXS会比JavaScript代码快2~20倍<br>在android设备上，二者的运行效率无差异</p><p>列表页面的API接口<br>以分页的形式，加载指定分类下商铺列表的数据:<br>①接口地址<br><a href="https://www.escook.cn/">https://www.escook.cn/</a> categories/:cate_ id/shops<br>URL 地址中的:cate_ id 是动态参数,表示分类的ld<br>②请求方式<br>GET 请求<br>③请求参数<br>page 表示请求第几页的数据<br>limit表示每页请求几条数据</p><p>一个本地生活小案例结束了<br>代码下一个日志</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E2%80%9C%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%B4%BB%E2%80%9D%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/03/25/%E2%80%9C%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%B4%BB%E2%80%9D%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// pages/home/home.js</span><br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br>      swiperList:[],<br>      jggList:[]<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br><span class="hljs-built_in">this</span>.getSwiperList(),<br><span class="hljs-built_in">this</span>.getjggList() <br>  &#125;,<br>  getSwiperList()&#123;<br>wx.request(&#123;<br>  url: <span class="hljs-string">&#x27;https://www.escook.cn/slides&#x27;</span>,<br>  method:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>  success:(res)=&gt;&#123;<br>    console.log(res)<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      swiperList:res.data<br>    &#125;)<br>  &#125;<br>&#125;)<br>  &#125;,<br>  getjggList()&#123;<br>wx.request(&#123;<br>  url: <span class="hljs-string">&#x27;https://www.escook.cn/categories&#x27;</span>,<br>  method:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>  success:(res)=&gt;&#123;<br>    console.log(res)<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      jggList:res.data<br>    &#125;)<br>  &#125;<br>&#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--pages/home/home.wxml--&gt;<br>&lt;swiper indicator-dots circular&gt;<br>  &lt;swiper-item wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;id&quot;</span>&gt;<br>    &lt;image src=<span class="hljs-string">&quot;&#123;&#123;item.image&#125;&#125;&quot;</span>&gt;&lt;/image&gt;<br>  &lt;/swiper-item&gt;<br>&lt;/swiper&gt;<br>&lt;view class=<span class="hljs-string">&quot;grid-list&quot;</span>&gt;<br>  &lt;navigator class=<span class="hljs-string">&quot;grid-item&quot;</span> wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;jggList&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;id&quot;</span> url=<span class="hljs-string">&quot;/pages/shoplist/shoplist?id=&#123;&#123;item.id&#125;&#125;&amp;title=&#123;&#123;item.name&#125;&#125;&quot;</span>&gt;<br>    &lt;image src=<span class="hljs-string">&quot;&#123;&#123;item.icon&#125;&#125;&quot;</span>&gt;&lt;/image&gt;<br>    &lt;text&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;<br>  &lt;/navigator&gt;<br>&lt;/view&gt;<br>&lt;view class=<span class="hljs-string">&quot;img-box&quot;</span>&gt;<br>  &lt;image src=<span class="hljs-string">&quot;...&quot;</span> mode=<span class="hljs-string">&quot;widthFix&quot;</span>&gt;&lt;/image&gt;<br>  &lt;image src=<span class="hljs-string">&quot;...&quot;</span> mode=<span class="hljs-string">&quot;widthFix&quot;</span>&gt;&lt;/image&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* pages/home/home.wxss */</span><br>swiper&#123;<br>  height: 350rpx;<br>&#125;<br><br>swiper image&#123;<br>  width: <span class="hljs-number">100</span>%;<br>  height: <span class="hljs-number">100</span>%;<br>&#125;<br>.grid-list&#123;<br>  display: flex;<br>  flex-wrap: wrap;<br>  border-left: 1rpx solid #efefef;<br>  border-top: 1rpx solid #efefef;<br>&#125;<br>.grid-item&#123;<br>  width: <span class="hljs-number">33.33</span>%;<br>  height: 200rpx;<br>  display: flex;<br>  flex-direction: column;<br>  align-content: center;<br>  align-items: center;<br>  border-right: 1rpx solid #efefef;<br>  border-bottom: 1rpx solid #efefef;<br>  box-sizing: border-box;<br>&#125;<br>.grid-item image&#123;<br>  width: 60rpx;<br>  height: 60rpx;<br>&#125;<br>.grid-item text&#123;<br>  font-size: 24rpx;<br>  margin-top: 10rpx;<br>&#125;<br>.img-box&#123;<br>  display: flex;<br>  padding: 20rpx 10rpx;<br>  justify-content: space-around;<br>&#125;<br>.img-box image&#123;<br>  width: <span class="hljs-number">45</span>%;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// pages/message/message.js</span><br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br>    count: <span class="hljs-number">0</span>,<br>    username:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>    country:<span class="hljs-string">&#x27;CHINA&#x27;</span><br>  &#125;,<br>  addcount() &#123;<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      count: <span class="hljs-built_in">this</span>.data.count + <span class="hljs-number">1</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>        count: <span class="hljs-number">0</span><br>      &#125;),<br>      wx.stopPullDownRefresh()<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br>    console.log(<span class="hljs-string">&#x27;触发了上拉触底&#x27;</span>)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;&#125;,<br>  <span class="hljs-string">&quot;enablePullDownRefresh&quot;</span>:<span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;dark&quot;</span>,<br>  <span class="hljs-string">&quot;onReachBottomDistance&quot;</span>: <span class="hljs-number">150</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--pages/message/message.wxml--&gt;<br>&lt;view&gt;count值是:&#123;&#123;count&#125;&#125;&lt;/view&gt;<br>&lt;button bindtap=<span class="hljs-string">&quot;addcount&quot;</span>&gt;+<span class="hljs-number">1</span>&lt;/button&gt;<br>&lt;view&gt;&#123;&#123;m1.toUpper(username)&#125;&#125;&lt;/view&gt;<br>&lt;view&gt;&#123;&#123;m2.tolower(country)&#125;&#125;&lt;/view&gt;<br>&lt;wxs <span class="hljs-keyword">module</span>=<span class="hljs-string">&quot;m1&quot;</span>&gt;<br>  <span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span>.toUpper = function (str) &#123;<br>    <span class="hljs-keyword">return</span> str.toUpperCase()<br>  &#125;<br>&lt;/wxs&gt;<br>&lt;wxs src=<span class="hljs-string">&quot;../../utils/tools.wxs&quot;</span> <span class="hljs-keyword">module</span>=<span class="hljs-string">&quot;m2&quot;</span>&gt;&lt;/wxs&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* pages/message/message.wxss */</span><br>.box&#123;<br>  height: 2000rpx;<br>  background-color: blue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// pages/contact/contact.js</span><br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br>    colorList: [],<br>    isloding:<span class="hljs-literal">false</span><br>  &#125;,<br>  getcolors() &#123;<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      isloding:<span class="hljs-literal">true</span><br>    &#125;)<br>    wx.showLoading(&#123;<br>      title: <span class="hljs-string">&#x27;数据加载中...&#x27;</span>,<br>    &#125;)<br>    wx.request(&#123;<br>      url: <span class="hljs-string">&#x27;http://www.escook.cn/api/color&#x27;</span>,<br>      method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      success: (&#123;<br>        data: res<br>      &#125;) =&gt; &#123;<br>        <span class="hljs-built_in">this</span>.setData(&#123;<br>          colorList: [...<span class="hljs-built_in">this</span>.data.colorList, ...res.data]<br>        &#125;)<br>      &#125;,<br>      complete: () =&gt; &#123;<br>        wx.hideLoading(&#123;&#125;)<br>        <span class="hljs-built_in">this</span>.setData(&#123;<br>          isloding:<span class="hljs-literal">false</span><br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br>  gotomessage() &#123;<br>    wx.switchTab(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/message/message&#x27;</span>,<br>    &#125;)<br>  &#125;,<br>  gotoinfo() &#123;<br>    wx.navigateTo(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/info/info&#x27;</span>,<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br><br>  &#125;,<br>  gotoinfo2() &#123;<br>    wx.navigateTo(&#123;<br>      url: <span class="hljs-string">&#x27;/pages/info/info?name=zs&amp;age=12&#x27;</span>,<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br><br>  &#125;,<br>  onLoad: function () &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.data.isloding)<span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">this</span>.getcolors()<br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br>    <span class="hljs-built_in">this</span>.getcolors()<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;&#125;,<br>  <span class="hljs-string">&quot;enablePullDownRefresh&quot;</span>:<span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;backgroundColor&quot;</span>: <span class="hljs-string">&quot;#efefef&quot;</span>,<br>  <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;dark&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--pages/contact/contact.wxml--&gt;<br>&lt;view wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;colorList&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;index&quot;</span> class=<span class="hljs-string">&quot;num-item&quot;</span> style=<span class="hljs-string">&quot;background-color:rgba(&#123;&#123;item&#125;&#125;);&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* pages/contact/contact.wxss */</span><br>.num-item&#123;<br>  border: 1rpx solid #efefef;<br>  border-radius: 8rpx;<br>  line-height: 200rpx;<br>  margin: 15rpx;<br>  text-align: center;<br>  text-shadow: 0rpx 0rpx 5rpx #fff;<br>  box-shadow: 1rpx 1rpx 6rpx #aaa;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// pages/info/info.js</span><br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br>    query: &#123;&#125;<br>  &#125;,<br>  back() &#123;<br>    wx.navigateBack()<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br>    console.log(options);<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>      query:options<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br><br><br>```java<br>&lt;!--pages/info/info.wxml--&gt;<br>&lt;text&gt;pages/info/info.wxml&lt;/text&gt;<br>&lt;navigator open-type=<span class="hljs-string">&quot;navigateBack&quot;</span> delte=<span class="hljs-string">&quot;1&quot;</span>&gt;后退&lt;/navigator&gt;<br>&lt;button bindtap=<span class="hljs-string">&quot;back&quot;</span>&gt;回退&lt;/button&gt;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br>```java<br><span class="hljs-comment">// pages/shoplist/shoplist.js</span><br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">data</span>: &#123;<br>    query: &#123;&#125;,<br>    shopList: [],<br>    page: <span class="hljs-number">1</span>,<br>    pageSize: <span class="hljs-number">10</span>,<br>    total: <span class="hljs-number">0</span>,<br>    isloding: <span class="hljs-literal">false</span><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br>    <span class="hljs-keyword">this</span>.setData(&#123;<br>      query: options<br>    &#125;)<br>    <span class="hljs-keyword">this</span>.getShopList()<br>  &#125;,<br>  getShopList(cb) &#123;<br>    <span class="hljs-keyword">this</span>.setData(&#123;<br>      isloding: <span class="hljs-literal">true</span><br>    &#125;)<br>    wx.showLoading(&#123;<br>        title: <span class="hljs-string">&#x27;数据加载中...&#x27;</span>,<br>      &#125;),<br>      wx.request(&#123;<br>        url: `https:<span class="hljs-comment">//www.escook.cn/categories/$&#123;this.data.query.id&#125;/shops`,</span><br>        method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-keyword">data</span>: &#123;<br>          _page: <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.page,<br>          _limit: <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.pageSize<br>        &#125;,<br>        success: (res) =&gt; &#123;<br>          <span class="hljs-comment">// console.log(res)</span><br>          <span class="hljs-keyword">this</span>.setData(&#123;<br>            shopList: [...<span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.shopList, ...res.<span class="hljs-keyword">data</span>],<br>            total: res.header[<span class="hljs-string">&#x27;X-Total-Count&#x27;</span>] - <span class="hljs-number">0</span><br>          &#125;)<br>        &#125;,<br>        complete: () =&gt; &#123;<br>          wx.hideLoading()<br>          <span class="hljs-keyword">this</span>.setData(&#123;<br>            isloding: <span class="hljs-literal">false</span><br>          &#125;)<br>          cb &amp;&amp; cb()<br>        &#125;<br>      &#125;)<br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="hljs-comment">   */</span><br>  onReady() &#123;<br>    wx.setNavigationBarTitle(&#123;<br>      title: <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.query.title<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面显示</span><br><span class="hljs-comment">   */</span><br>  onShow() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面隐藏</span><br><span class="hljs-comment">   */</span><br>  onHide() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面卸载</span><br><span class="hljs-comment">   */</span><br>  onUnload() &#123;<br><br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  onPullDownRefresh() &#123;<br><span class="hljs-keyword">this</span>.setData(&#123;<br>  page:<span class="hljs-number">1</span>,<br>  shopList:[],<br>  total:<span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-keyword">this</span>.getShopList(()=&gt;&#123;<br>wx.stopPullDownRefresh()<br>&#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">   */</span><br>  onReachBottom() &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.page * <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.pageSize&gt;=<span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.total)&#123;<br>      <span class="hljs-keyword">return</span> wx.showToast(&#123;<br>        title: <span class="hljs-string">&#x27;数据加载完毕！&#x27;</span>,<br>        icon:<span class="hljs-string">&#x27;none&#x27;</span><br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.isloding) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">this</span>.setData(&#123;<br>      page: <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.page + <span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-keyword">this</span>.getShopList()<br>  &#125;,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 用户点击右上角分享</span><br><span class="hljs-comment">   */</span><br>  onShareAppMessage() &#123;<br><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;usingComponents&quot;</span>: &#123;&#125;,<br>  <span class="hljs-string">&quot;onReachBottomDistance&quot;</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-string">&quot;enablePullDownRefresh&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;backgroundColor&quot;</span>: <span class="hljs-string">&quot;#efefef&quot;</span>,<br>  <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;dark&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--pages/shoplist/shoplist.wxml--&gt;<br>&lt;view class=<span class="hljs-string">&quot;shop-item&quot;</span> wx:<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;&#123;&#123;shopList&#125;&#125;&quot;</span> wx:key=<span class="hljs-string">&quot;id&quot;</span>&gt;<br>  &lt;view class=<span class="hljs-string">&quot;thumb&quot;</span>&gt;<br>    &lt;image src=<span class="hljs-string">&quot;&#123;&#123;item.images[0]&#125;&#125;&quot;</span>&gt;&lt;/image&gt;<br>  &lt;/view&gt;<br>  &lt;view class=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>    &lt;text&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;<br>    &lt;text&gt;电话:&#123;&#123;tools.splitPhone(item.phone)&#125;&#125;&lt;/text&gt;<br>    &lt;text&gt;地址:&#123;&#123;item.address&#125;&#125;&lt;/text&gt;<br>    &lt;text&gt;营业时间:&#123;&#123;item.businessHours&#125;&#125;&lt;/text&gt;<br>  &lt;/view&gt;<br>&lt;/view&gt;<br>&lt;wxs src=<span class="hljs-string">&quot;../../utils/tools.wxs&quot;</span> <span class="hljs-keyword">module</span>=<span class="hljs-string">&quot;tools&quot;</span>&gt;&lt;/wxs&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* pages/shoplist/shoplist.wxss */</span><br>.shop-item &#123;<br>  display: flex;<br>  padding: 15rpx;<br>  border: 1rpx solid #efefef;<br>border-radius: 15rpx;<br>  margin: 15rpx;<br>  box-shadow: 1rpx 1rpx 15rpx #ddd;<br>&#125;<br><br>.thumb image &#123;<br>  width: 250rpx;<br>  height: 250rpx;<br>  display: block;<br>  margin-right: 15rpx;<br>&#125;<br><br>.info &#123;<br>  display: flex;<br>  flex-direction: column;<br>  justify-content: space-around;<br>  font-size: 24rpx;<br>&#125;<br><br>.shop-title &#123;<br>  font-weight: bold;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">function <span class="hljs-title function_">splitPhone</span><span class="hljs-params">(str)</span> &#123;<br>  <span class="hljs-keyword">if</span> (str.length != <span class="hljs-number">11</span>) <span class="hljs-keyword">return</span> str<br>  <span class="hljs-type">var</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> str.split(<span class="hljs-string">&#x27;&#x27;</span>)<br>  arr.splice(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>  arr.splice(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>  <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  splitPhone: splitPhone<br>&#125;<br></code></pre></td></tr></table></figure><p>未提及的皆为未改动文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday09/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday09/</url>
    
    <content type="html"><![CDATA[<p>自定义组件-组件的创建与引用</p><p>1.创建组件<br>①在项目的根目录中，鼠标右键,创建components -&gt; test文件夹<br>②在新建的components -&gt; test文件夹上，鼠标右键,点击“ 新建Component’<br>③键入组件的名称之后回车，会自动生成组件对应的4个文件，后缀名分别为.js，.json，.wxml 和.wxss<br>2.引用组件<br>组件的引用方式分为“局部引用”和“全局引用”，顾名思义:<br>局部引用:组件只能在当前被引用的页面内使用<br>全局引用:组件可以在每个小程序页面中使用<br>3.局部引用组件<br>在页面的.json 配置文件中引用组件的方式，叫做“局部引用”。<br>局部引用组件<img src="https://img-blog.csdnimg.cn/a22673f7ce044d5486113f61208287fb.png" alt="在这里插入图片描述"><br>全局引用组件<br>在app.json全局配置文件中引用组件的方式，叫做“全局引用”。<br><img src="https://img-blog.csdnimg.cn/6055f8b42a184a1f8910b8da83cdd0be.png" alt="在这里插入图片描述">全局引用VS局部引用<br>根据组件的使用频率和范围，来选择合适的引用方式:<br>如果某组件在多个页面中经常被用到，建议进行“全局引用”<br>如果某组件只在特定的页面中被用到，建议进行“局部引用”</p><p>组件和页面的区别<br>从表面来看，组件和页面都是由js、json、 .wxml 和.WXSS这四个文件组成的。但是，组件和页面的js与<br>json文件有明显的不同:<br>组件的.json文件中需要声明”component”: true属性<br>组件的.js 文件中调用的是Component()函数<br>组件的事件处理函数需要定义到methods节点中</p><p>组件样式隔离<br>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的<br>UI结构，如图所示:<br>组件A的样式不会影响组件C的样式<br>组件A的样式不会影响小程序页面的样式<br>小程序页面的样式不会影响组件A和C的样式<br><img src="https://img-blog.csdnimg.cn/56e3233db1274fea87198634088cc397.png" alt="在这里插入图片描述"><br>组件样式隔离的注意点<br>app.wxss 中的全局样式对组件无效<br>只有 class选择器会有样式隔离效果，id 选择器、属性选择器、标签选择器不受样式隔离的影响<br>建议:在组件和引用组件的页面中建议使用class选择器，不要使用id、属性、标签选择器</p><p>修改组件的样式隔离选项<br>默认情况下，自定义组件的样式隔离特性能够防止组件内外样式互相干扰的问题。但有时，我们希望在外界能<br>够控制组件内部的样式，此时，可以通过stylelsolation修改组件的样式隔离选项<br>stylelsolation的可选值<br><img src="https://img-blog.csdnimg.cn/08ee9b7ad4314ecfaf49718a7103578b.png" alt="在这里插入图片描述"><br>自定义组件 数据 方法 属性<br>data数据<br>在小程序组件中，用于组件模板渲染的私有数据，需要定义到data节点中<br>methods方法<br>在小程序组件中，事件处理函数和自定义方法需要定义到methods节点中<br>properties属性<br>在小程序组件中，properties 是组件的对外属性，用来接收外界传递到组件中的数据</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/RFID%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2023/03/25/RFID%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%AC%AC1%E7%AB%A0%EF%BC%9ARFID%E6%8A%80%E6%9C%AF%E6%A6%82%E6%8B%AC">TOC</a></p><h1 id="1-1RFID技术的特点"><a href="#1-1RFID技术的特点" class="headerlink" title="1.1RFID技术的特点"></a>1.1RFID技术的特点</h1><p><strong>电子标签技术</strong>（Radio Frequency Identification，RFID）<br>RFID技术是从20世纪90年代兴起的一项自动识别技术<br>自动识别的方法有很多，每种方法各有其特点和应用领域<br><img src="https://img-blog.csdnimg.cn/a93c15ba2c714fb2a12e035efff86a28.jpg" alt="在这里插入图片描述"><br>RFID自动识别的优势及特点主要表现在如下几个方面：<br>1.快速扫描<br>2.体积小型化，形状多样化<br>3.抗污染能力和耐久性<br>4.可重复使用<br>5.穿透性和无屏障阅读<br>6.数据的记忆容量大<br>7.安全性</p><h1 id="1-2RFID的系统组成"><a href="#1-2RFID的系统组成" class="headerlink" title="1.2RFID的系统组成"></a>1.2RFID的系统组成</h1><p>典型的RFID系统主要由阅读器、电子标签、RFID中间件和应用系统软件四部分构成<br>中间件和应用软件系统统称为应用系统</p><h2 id="1-2-1硬件组建"><a href="#1-2-1硬件组建" class="headerlink" title="1.2.1硬件组建"></a>1.2.1硬件组建</h2><p>1.<strong>阅读器</strong><br>阅读器主要负责与电子标签的双向通信，同时接受来自主机系统的控制指令<br>阅读器的频率决定了RFID系统工作的频段，其功率决定了射频识别的有效距离<br>阅读器根据使用的结构和技术不同可以是读或读写装置，它是RFID系统信息控制和处理中心<br>阅读器通常由射频接口、逻辑控制单元和天线三部分组成</p><p>1)射频接口（射频接口模块）的主要任务:<br>(1)产生高频发射能量，激活电子标签并为其提供能量。<br>(2)对发射信号进行调制，将数据传输给电子标签<br>(3)接收并调制来自电子标签的射频信号</p><p>在射频接口中有两个分割开的信号通道，分别用于来往电子标签与阅读器两个方向的数据传输<br>传送往电子标签的数据通过发射器分支通道发射，而来自于电子标签的数据则通过接收器分支通道接收</p><p>2)逻辑控制单元(读写模块)的主要任务：<br>(1)与应用系统软件进行通信，并执行从应用系统软件发送来的指令<br>(2)控制阅读器与电子标签的通信过程<br>(3)信号的编码与解码<br>(4)对阅读器和标签之间传输的数据进行加密和解密<br>(5)执行防碰撞算法<br>(6)对阅读器和标签的身份进行验证</p><p> <img src="https://img-blog.csdnimg.cn/c6036df8f94a4b2d83b4ca3a0e4701a2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8b648002113b48cba07a0d5ad6257570.png" alt="在这里插入图片描述"><br>3)天线<br>天线是一种能将接收到的电磁波转换为电流信号，或将电流信号转换成电磁波发射出去的装置</p><p>2.<strong>电子标签</strong><br>电子标签，也称为智能标签，是指由IC芯片和无线通信无线组成的超微型的小标签，其内置的射频天线用于和阅读器进行通信<br>系统工作时，阅读器发出查询(能量)信号，标签(无源)在收到查询(能量)信号后将其一部分整流为直流电源供电子标签内的电路工作;另一部分能量信号被电子标签内保存的数据信息调制后反射回阅读器。<br><strong>电子标签是射频识别系统真正的数据载体</strong><br>电子标签内部各模块功能描述:<br>(1)天线:用来接收阅读器送来的信号，并把要求的数据送回给阅读器<br>(2)电压调节器:.把阅读器送来的射频信号转换为直流信号，并经大电容储存能量，再经稳压电路以提供稳定的电源<br>(3)调节器:逻辑控制电路送出的数据经调制电路调制后加载到天线送给阅读器。<br>(4)解调器:把载波去除以取出真正的调制信号。<br>(5)逻辑控制单元:用来译码阅读器送来的信号，并依其要求送回数据给阅读器<br>(6)存储单元:包括EEPROM与ROM，作为系统运行及存放识别数据的位置。</p><h2 id="1-2-2软件组成"><a href="#1-2-2软件组成" class="headerlink" title="1.2.2软件组成"></a>1.2.2软件组成</h2><p>1.<strong>中间件</strong><br>中间件是一种独立的系统软件或服务程序;分布式应用软件借助这种软件在不同的技术之间共享资源<br>中间件位于客户机、服务器的操作系统之上，管理计算资源和网络通信。<br>RFID中间件扮演着电子标签和应用程序之间的中介角色<br>从应用程序端使用中间件提供的一组通用的应用程序接口(API)，即能连到RFID阅读器，读取电子标签数据<br><img src="https://img-blog.csdnimg.cn/21d8d5a2e76b49c18f2eb6eaa631017f.png" alt="在这里插入图片描述">RFID中间件主要包括以下i四个功能:<br>1)阅读器协调控制<br>2)数据过滤与处理<br>3)数据路由与集成<br>4)进程管理</p><p>2.<strong>RFID应用系统软件</strong><br>RFID应用系统软件是针对不同行业的特定需求开发的应用软件</p><h1 id="1-3RFID技术的物理学原理"><a href="#1-3RFID技术的物理学原理" class="headerlink" title="1.3RFID技术的物理学原理"></a>1.3RFID技术的物理学原理</h1><p>RFID是一种易于操控、简单实用且特别适用于自动化控制的应用技术，其基本原理是利用射频信号耦合(电感或电磁耦合)或雷达反射的传输特性，实现对被识别物体的自动识别。</p><h2 id="1-3-1与RFID相关的电磁场理论"><a href="#1-3-1与RFID相关的电磁场理论" class="headerlink" title="1.3.1与RFID相关的电磁场理论"></a>1.3.1与RFID相关的电磁场理论</h2><p>1.天线场的概念<br>1)无功近场区<br>2)辐射近场区<br>3)辐射远场区<br>2.天线的方向性图</p><h2 id="1-3-2能量耦合和数据传输"><a href="#1-3-2能量耦合和数据传输" class="headerlink" title="1.3.2能量耦合和数据传输"></a>1.3.2能量耦合和数据传输</h2><p>射频识别系统中射频标签与读写器之间的作用距离是射频识别系统应用中的一个重要问题，通常情况下这种作用距离定义为射频标签与读写器之间能够可靠交换数据的距离<br>1.耦合类型<br>根据频射识别系统作用距离的远近情况，标签天线与读写器天线之间的耦合可以分为，密耦合系统、遥耦合系统和远距离系统三类<br>1)密耦合系统<br>典型作用距离范围为0<del>1cm<br>密耦合系统的工作频率一般局限于30MHz一下的频率<br>目前，密耦合标签只作为ID-1格式的非接触IC卡使用<br>2)遥耦合系统<br>典型作用距离可达1m<br>所有遥耦合系统在读写器与标签之间都是电感(磁)耦合，因此也将这些系统称做电感无线电装置<br>遥耦合系统的发送频率通常使用135kHz以下的频率，或使用6.75MHz、13.56MHz以及27.125MHz频率<br>遥耦合系统又可细分为近耦合系统(典型的作用距离为15cm)与疏耦合系统(典型的作用距离为1m )<img src="https://img-blog.csdnimg.cn/a2f4120d75a8430aa722ac9eb590fe18.jpg" alt="在这里插入图片描述"><br>3)远距离系统<br>远距离系统的典型作用距离为1</del>10m<br>所有的远距离系统均是利用标签与读写器天线辐射远场区之间的电磁场耦合(电磁波的发射与反射，也称之为反向散射耦合)所构成的无接触空间信息传输通道进行工作的<br>远距离系统的典型工作频率为915MHz(这在欧洲是不允许的)、2.45GHz和5.8GHz，还有一些其他频率，如433MHz<br>远距离系统的射频标签根据其中是否包含电池分为无源射频标签(不含电池)和半无源射频标签(内含电池)<br>理想的射频识别系统:射频标签无源;射频标签可无线书写;射频标签与读写器支持多标签读写;适用于高速移动物体的识别(物体移动速度大于80km&#x2F;h);远距离(读写距离大于5~10m);低成本(可满足一次性使用要求)</p><p>2.<strong>数据传输原理</strong><br>读写器和标签之间的通信通过电磁波实现，按照通信距离可分为远场和近场<br>读写器与标签之间数据交换方式也相应地称为负载波调制和反向散射调制<br>()1)负载调制:近距离低频射频识别系统是通过准静态场的耦合实现的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/SSM%E6%A1%86%E6%9E%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2023/03/25/SSM%E6%A1%86%E6%9E%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>什么是框架?<br>传统概念:<br>框架（framework）是一个基本概念上的结构，用于去解决或者处理复杂的问题。这个广泛的定义使用的十分流行，尤其在软件概念。框架也能用于机械结构。</p><p>软件概念:<br>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。</p><p>IT语境中的框架，特指为解决一个开放性问题而设计的具有一定约束性的支撑结构。在此结构上可以根据具体问题扩展、安插更多的组成部分，从而更迅速和方便地构建完整的解决问题的方案。<br>目前理解为:可以用来更快更好的解决特定问题的模板</p><p>SSM框架是标准的模型-视图-控制器(Model-View-Controller,MVC)，将整个系统划分为视图<br>(View)层(也叫表现层)、控制器(Controller)层、业务逻辑(Service)层、数据访问(DAO)层(也叫数据持久层)。</p><p>Spring Framework系统框架<img src="https://img-blog.csdnimg.cn/2f767d470d424d26b6c952cc9c251110.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/be67408174fb45b98180e84a3e8fd905.png" alt="在这里插入图片描述"><br>代码书写现状?<br>●耦合度偏高<br>●解决方案<br>●使用对象时, 在程序中不要主动使用new产生对象,转换为由外部提供对象<br>●IoC ( Inversion of Control )控制反转<br>●对象的创建控制权由程序转移到外部， 这种思想称为控制反转</p><p>IoC ( Inversion of Control ) 控制反转<br>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转<br>Spring技术对IoC思想进行了实现<br>Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的( 外部<br>●IoC容器负责对象的创建、初始化等-系列工作, 被创建或被管理的对象在IoC容器中统称为Bean<br>●DI ( Dependency Injection )依赖注入<br>●在容器中建立bean与bean之间的依赖关系的整个过程,称为依赖注入<br>●目标: 充分解耦<br>●使用IoC容器管理bean (IoC)<br>●在IoC容器内将有依赖关系的bean进行关系绑定(DI)<br>最终效果:使用对象时不仅可以直接从 IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系<br>#IoC入门案例思路分析#<br>1.管理什么? ( Service与Dao )<br>2.如何将被管理的对象告知IoC容器? (配置)<br>3.被管理的对象交给IoC容器,如何获取到IoC容器? ( 接口)<br>4.IoC容器得到后,如何从容器中获取bean ? ( 接口方法)<br>5.使用Spring导入哪些坐标?( pom. xml )</p><p><img src="https://img-blog.csdnimg.cn/b79a04dc727c438f992a538e516a9838.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday10/"/>
    <url>/2023/03/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fday10/</url>
    
    <content type="html"><![CDATA[<p>properties属性<br>在小程序组件中，properties 是组件的对外属性，用来接收外界传递到组件中的数据<br>properties定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">properties: &#123;<br>  <span class="hljs-comment">// 第一种方式:简化的定义方式（没办法指定默认值）</span><br>  <span class="hljs-comment">// max: Number</span><br>  <span class="hljs-comment">//第二种方式:完整的定义方式(可指定默认值)</span><br>  max: &#123;<br>    type: Number,<br>    value: <span class="hljs-number">10</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>data和properties的区别<br>在小程序的组件中，properties 属性和data数据的用法相同，它们都是可读可写的，只不过:<br>●data更倾向于存储组件的私有数据<br>●properties更倾向于存储外界传递到组件中的数据</p><p>使用setData修改properties的值<br>由于data数据和properties属性在本质上没有任何区别，因此properties属性的值也可以用于页面渲染,<br>或使用setData为properties中的属性重新赋值</p><p>数据监听器<br>数据监听器用于监听和响应任何属性和数据字段的变化，从而执行特定的操作。它的作用类似于vue中的<br>watch侦听器。在小程序组件中，数据监听器的基本语法格式<br><img src="https://img-blog.csdnimg.cn/ce394da98b2b4c64a3ed994fd1904547.png" alt="在这里插入图片描述">监听对象属性的变化<br>数据监听器支持监听对象中单个或多个属性的变化<br><img src="https://img-blog.csdnimg.cn/a15ee23fc5434e88836d0f50e2c7c193.png" alt="在这里插入图片描述"><br>监听对象中所有属性的变化<br>如果某个对象中需要被监听的属性太多，为了方便，可以使用通配符**来监听对象中所有属性的变化<br><img src="https://img-blog.csdnimg.cn/c52f1a78c03a4eb38c1e0eabc62d137a.png" alt="在这里插入图片描述">什么是纯数据字段？<br>概念:纯数据字段指的是那些不用于界面渲染的data字段。<br>应用场景:例如有些情况下，某些data中的字段既不会展示在界面上，也不会传递给其他组件,仅仅在当<br>组件内部使用。带有这种特性的data字段适合被设置为纯数据字段。<br>好处:纯数据字段有助于提升页面更新的性能。</p><p>使用规则<br>在Component构造器的options节点中，指定pureDataPattern为一个正则表达式，字段名符合这个正则表达式的字段将成为纯数据字段</p><p><img src="https://img-blog.csdnimg.cn/7d495267dfd14426bd8f099c440f6670.png" alt="在这里插入图片描述">组件主要的生命周期函数<br>在小程序组件中，最重要的生命周期函数有3个，分别是created、attached、 detached。 它们各自的特点如下:<br>①组件实例刚被 创建好的时候，created 生命周期函数会被触发<br>●此时还不能调用setData<br>●通常在这个生命周期函数中，只应该用于给组件的this添加一些自定义的属性字段<br>②在组件 完全初始化完毕、进入页面节点树后，attached 生命周期函数会被触发<br>●此时，this.data 已被初始化完毕<br>●这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行(例如发请求获取初始数据)<br>③在组件离开页面节点树后，detached 生命周期函数会被触发<br>●退出一个页面时，会触发页面内每个自定义组件的detached生命周期函数<br>●此时适合做一-些清理性质的工作</p><p>lifetimes节点<br>在小程序组件中，生命周期函数可以直接定义在Component构造器的第一-级参数中， 可以在lifetimes字段内进行声明(这是推荐的方式，其优先级最高)。</p><p>什么是组件所在页面的生命周期？<br>有时，自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期。<br>例如:每当触发页面的show生命周期函数的时候，我们希望能够重新生成一一个随机的RGB颜色值。<img src="https://img-blog.csdnimg.cn/8203d1c024c549989cfc854fea35c7c1.png" alt="在这里插入图片描述"><br>pageLifetimes节点<br>组件所在页面的生命周期函数，需要定义在pageLifetimes节点中</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring%E5%AD%A6%E4%B9%A001/"/>
    <url>/2023/03/25/spring%E5%AD%A6%E4%B9%A001/</url>
    
    <content type="html"><![CDATA[<p>spring三大组件:</p><h1 id="Bean组件"><a href="#Bean组件" class="headerlink" title="Bean组件"></a>Bean组件</h1><p>是在Spring中的Beans包下，为了解决三件事。Bean的创建，Bean的定义，Bean的解析。<br>Bean的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;&quot;</span> name=<span class="hljs-string">&quot;&quot;</span> class=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;property name=<span class="hljs-string">&quot;&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>/&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>id是bean的标识符，且唯一<br>如果配置id,又配置了name,那么name是别名<br>name可以设置多个别名,可以用逗号,分号,空格隔开<br>如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</p><h1 id="Context组件"><a href="#Context组件" class="headerlink" title="Context组件"></a>Context组件</h1><p>在Spring中的context包下，为Spring提供运行环境，用以保存各个对象状态。</p><h1 id="Core组件"><a href="#Core组件" class="headerlink" title="Core组件"></a>Core组件</h1><p>访问资源</p><h1 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入(DI)"></a>依赖注入(DI)</h1><p>构造器注入和Set 注入<br>以下为Set注入<br>Set注入在进行书写时 若不填它会自带一个默认值而构造器要求必须填写，否则就会报错<br>List注入，Map注入<br><strong>scope属性</strong><br>Singleton(单例模式)<br>只会存在一个共享的bean实例<br>Prototype(原型模式)<br>表示一个bean定义对应多个对象实例<br>配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;p&quot;</span> class=<span class="hljs-string">&quot;Person&quot;</span> scope=<span class="hljs-string">&quot;prototype&quot;</span> init-method=<span class="hljs-string">&quot;init&quot;</span> destroy-method=<span class="hljs-string">&quot;init&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;xxx&quot;</span>&gt;&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;address&quot;</span> value=<span class="hljs-string">&quot;新乡市&quot;</span>&gt;&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;20&quot;</span>&gt;&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;brother&quot;</span> ref=<span class="hljs-string">&quot;d&quot;</span>&gt;&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;hobbyList&quot;</span>&gt;<br>            &lt;list&gt;<br>                &lt;value&gt;吃饭&lt;/value&gt;<br>                &lt;value&gt;睡觉&lt;/value&gt;<br>                &lt;value&gt;打豆豆&lt;/value&gt;<br>            &lt;/list&gt;<br>        &lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;map&quot;</span>&gt;<br>            &lt;map&gt;<br>                &lt;entry key=<span class="hljs-string">&quot;1&quot;</span> value=<span class="hljs-string">&quot;enh&quot;</span>&gt;&lt;/entry&gt;<br>                &lt;entry key=<span class="hljs-string">&quot;1&quot;</span> value=<span class="hljs-string">&quot;zhendi&quot;</span>&gt;&lt;/entry&gt;<br>            &lt;/map&gt;<br>        &lt;/property&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;d&quot;</span> class=<span class="hljs-string">&quot;Brother&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;老二&quot;</span>&gt;&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;20&quot;</span>&gt;&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;date&quot;</span> ref=<span class="hljs-string">&quot;time&quot;</span>&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;time&quot;</span> class=<span class="hljs-string">&quot;java.util.Date&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Starter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> app.getBean(<span class="hljs-string">&quot;p&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> app.getBean(Person.class);<br>        <span class="hljs-keyword">if</span> (person==bean)&#123;<br>            System.out.println(<span class="hljs-number">6</span>);<br>        &#125;<br>        System.out.println();<br>        System.out.println(person);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> app.getBean(<span class="hljs-string">&quot;p&quot;</span>);<br>        <span class="hljs-keyword">if</span> (p1==person)&#123;<br>            System.out.println(<span class="hljs-string">&quot;一样&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Buyiyang&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Brother brother;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbyList;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;初始化调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, brother=&quot;</span> + brother +<br>                <span class="hljs-string">&quot;, hobbyList=&quot;</span> + hobbyList +<br>                <span class="hljs-string">&quot;, map=&quot;</span> + map +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobbyList</span><span class="hljs-params">(List&lt;String&gt; hobbyList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hobbyList = hobbyList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBrother</span><span class="hljs-params">(Brother brother)</span> &#123;<br>        <span class="hljs-built_in">this</span>.brother = brother;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Brother</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date date;<br>    <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(Date date)</span> &#123;<br>        <span class="hljs-built_in">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Brother&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, date=&quot;</span> + date +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring%E5%AD%A6%E4%B9%A002/"/>
    <url>/2023/03/25/spring%E5%AD%A6%E4%B9%A002/</url>
    
    <content type="html"><![CDATA[<p><strong>依赖自动装配</strong><br>●IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配<br>●自动装配方式<br>■按类型(常用)<br>■按名称<br>■按构造方法<br>■不启用自动装配</p><p>●配置中使用bean标签 autowire属性设置自动装配的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id= ”bookDao<span class="hljs-string">&quot; class= &quot;</span> com. itheima . dao. impl. BookDaoImpl<span class="hljs-string">&quot; /&gt;</span><br><span class="hljs-string">&lt;bean id=&quot;</span> bookService<span class="hljs-string">&quot; class=&quot;</span> com.itheima.service.impl.BookServiceImpl<span class="hljs-string">&quot; autowire=&quot;</span>byType<span class="hljs-string">&quot;/&gt;</span><br></code></pre></td></tr></table></figure><p>●自动装配用于引用类型依赖注入,不能对简单类型进行操作<br>●使用按类型装配时( byType )必须保障容器中相同类型的bean唯一, 推荐使用<br>●使用按名称装配时( byName )必须保障容器中具有指定名称的bean ,因变量名与配置耦合,不推荐使用<br>●自动装配优先级低于setter注入与构造器注入,同时出现时自动装配配置失效</p><p><strong>案例:数据源对象管理<br>第三方资源配置管理，管理连接池对象</strong></p><p><strong>c3p0</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//●导入druid坐标</span><br><span class="hljs-comment">//DruidDataSource</span><br>&lt;dependency&gt;<br>&lt;groupId&gt;com.alibaba&lt;/ groupId&gt;<br>&lt;artifactId&gt;druid&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.16</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br><span class="hljs-comment">//配置数据源对象作为spring管理的bean</span><br><span class="hljs-comment">//ComboPooledDataSource</span><br>&lt;bean id=<span class="hljs-string">&quot; dataSource&quot;</span> class=<span class="hljs-string">&quot; com.alibaba.druid.pool.DruidDataSource&quot;</span> &gt;<br>&lt;property name= <span class="hljs-string">&quot; driverClassName&quot;</span> value= ”com.mysq1.jdbc.Driver<span class="hljs-string">&quot;/&gt;</span><br><span class="hljs-string">//com.mysq1.jdbc.Driver</span><br><span class="hljs-string">//mysql8以上为&quot;</span>com.mysql.cj.jdbc.Driver<span class="hljs-string">&quot;</span><br><span class="hljs-string">&lt;property name=&quot;</span>url<span class="hljs-string">&quot; value= &quot;</span>jdbc :mysql :<span class="hljs-comment">//127.0.0.1:3306/spring_ _db&quot;/&gt;</span><br>&lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&#x27;&quot;</span>/&gt;<br>&lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p><strong>加载properties文件</strong></p><p>加载properties配置信息<br>开命名空间<br>1.开启context命名空间<br><img src="https://img-blog.csdnimg.cn/ad49915a90dd45a980f958670dedf4fe.png" alt="在这里插入图片描述"><br>2.使用context空间加载properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;context:property-placeholder location=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>可以同时加载多个properties文件  相当于将他们合并加载<br>但如果改为  classpath:*.properties类路径 则为全部的properties文件<br>仅能加载本工程中读<br>3.使用属性占位符${}读取properties文件中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean class=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;driverClassName&quot;</span> value=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;$&#123;idbc.ppassword&#125;&quot;</span>/&gt;<br>    &lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>前期补充:<br>容器初始化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过文件系统加载,绝对路径</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(<span class="hljs-string">&quot;</span><br><span class="hljs-string">        (绝对路径)&quot;</span>);<br></code></pre></td></tr></table></figure><p>bean获取的两种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao1</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>,BookDao.class);<br><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao2</span> <span class="hljs-operator">=</span> ctx.getBean(BookDao.class);<br></code></pre></td></tr></table></figure><p>BeanFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//        已废弃的创建方式</span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resources</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(resources);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao3</span> <span class="hljs-operator">=</span> bf.getBean(BookDao.class);<br>        bookDao3.save();<br></code></pre></td></tr></table></figure><p>两种的区别<br>&#x2F;&#x2F;        BeanFactory 延迟加载 ApplicationContext 立即加载<br>&#x2F;&#x2F;        在applicationContext.xml种  加上对应的lazy-init&#x3D;“true”也可以实现延迟加载<br><img src="https://img-blog.csdnimg.cn/969bc284d38e493c8fcf3758dd0c9bc6.png" alt="在这里插入图片描述">核心容器总结<br>容器相关<br>●BeanFactory 是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载<br>●ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载<br>●ApplicationContext接口提供基础的bean操作相关方法， 通过其他接口扩展其功能<br>●ApplicationContext接口常用初始化类<br>    ■ClassPathXmlApplicationContext<br>    ■FileSystemXmlApplicationContext</p><p>bean相关<br><img src="https://img-blog.csdnimg.cn/5634e1ab3e6445ce90c5e14c148ec5ce.png" alt="在这里插入图片描述">依赖注入相关<br><img src="https://img-blog.csdnimg.cn/2d25844cff4a44b1ac5ef826e6444764.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring%E5%AD%A6%E4%B9%A004/"/>
    <url>/2023/03/25/spring%E5%AD%A6%E4%B9%A004/</url>
    
    <content type="html"><![CDATA[<p>Mybatis<br>mybatis是什么？<br>mybatis是一款用于<em>持久层的、轻量级的半自动化ORM框架，封装了所有jdbc操作以及设置查询参数和获取结果集的操作</em>，支持自定义sql、存储过程和高级映射。<br>持久层是什么？轻量级什么概念？ORM什么意思？jdbc是什么？高级映射又是哪些映射？<br>1.持久，也就是”保持长久“的意思，它针对的是系统中数据存在的时限，而非其他。<br>总结一下，框架用于持久层，就是说这个框架是和数据库进行交互的，用于数据库中数据操作的框架。<br>2.理解为所用框架开发的程序启动时占用的资源少、对业务代码的侵入性不强、比较容易配置、使用和部署简单、独立部署即可使用无需依赖另外的框架<br>3.Object-Relationl Mapping，它的作用是在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了 。<br>4.使用java连接数据库的工具，就是一组使用java代码来执行SQL语句的API。<br>5.一对一关系映射，一对多关系映射，多对多关系映射<br><strong>Spring整合MyBatis</strong></p><p><em>MyBatis程序核心对象分析</em><img src="https://img-blog.csdnimg.cn/e87de540d4f044999622321b017a402f.png" alt="在这里插入图片描述"><em>整合Mybatis</em><br>SqlSessionFactoryBean<br>MapperScannerConfigurer<br><img src="https://img-blog.csdnimg.cn/386414d402b84da9a9987e79b5df9922.png" alt="在这里插入图片描述"><typeAliases><br><environments>配置改为以下内容<br><img src="https://img-blog.csdnimg.cn/98c2ade2ef534ca38ab2f34e8f1c01c0.png" alt="在这里插入图片描述"><mappers><br>改为<br><img src="https://img-blog.csdnimg.cn/f761e9d7979547f39dcf4274a947b274.png" alt="在这里插入图片描述"><br>JUnit<br>主要用来帮助开发人员进行Java的单元测试<br>Spring整合JUnit<br>需要加入的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>     &lt;groupId&gt;junit&lt;/groupId&gt;<br>     &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>     &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>     &lt;scope&gt;test&lt;/scope&gt;<br>   &lt;/dependency&gt;<br><br>   &lt;dependency&gt;<br>     &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>     &lt;artifactId&gt;spring-test&lt;/artifactId&gt;<br>     &lt;version&gt;<span class="hljs-number">5.2</span><span class="hljs-number">.10</span>.RELEASE&lt;/version&gt;<br>   &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>使用Spring整合Juint专用的类加载器<br>●@Runwith (SpringJUnit4ClassRunner.class )<br>●@ContextConfiguration(classes&#x3D;?.class)<br><img src="https://img-blog.csdnimg.cn/a3262433ef9c4e6da46ca5dbe045999b.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring%E5%AD%A6%E4%B9%A003/"/>
    <url>/2023/03/25/spring%E5%AD%A6%E4%B9%A003/</url>
    
    <content type="html"><![CDATA[<p>注解开发<br>注解开发定义bean<br>在你要使用的bean 上配置@Component<br>@Component(““)可指定名称<br><img src="https://img-blog.csdnimg.cn/98781afe4c194b7486c5cfff06b6565d.png" alt="在这里插入图片描述">在applicationContext.xml(核心配置文件种通过组件加载bean)<br><img src="https://img-blog.csdnimg.cn/b8671754c6de4ba6a31aedee54f7149e.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2a78d20b4ab548fd8311d5d9cdba7c0a.png" alt="在这里插入图片描述"><br>这三个注解和@Component功能相同 只是为了开发便于区分而使用</p><p>纯注解开发<br>●Spring3.0开启了纯注解开发模式,使用Java类替代配置文件,开启了Spring快速开发赛道<br>●Java类代替Spring核心配置文件,<br>●@Configuration注解用于设定当前类为配置类<br>●@ComponentScan注解用于设定扫 描路径,此注解只能添加一次,多个数据请用数组格式<br>@ComponentScan({ com . itheima. service” , “com. itheima.dao”})<br><img src="https://img-blog.csdnimg.cn/d99b7c20a9524fde96c060b54ede82fe.png" alt="在这里插入图片描述">bean作用范围<br>bean生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>依赖注入<br>自动装配<br>●使用@Autowired注解开启自动装配模式(按类型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-comment">//@Qualifier(&quot;bookDao&quot;)多个时 可以用这个说明注入哪个 但需配合 @Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br><span class="hljs-comment">//    public void setBookDao(BookDao bookDao) &#123;</span><br><span class="hljs-comment">//        this.bookDao = bookDao;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//在使用@Autowired后set注入可以不用写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;6666&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>●注意:自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据, 因此无需提供setter方法<br>●注意:自动装配建议使用无参构造方法创建对象(默认) , 如果不提供对应构造方法,请提供唯一的构造方法</p><p>●使用@Value实现简单类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;hutao&quot;)</span><br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book dao save ... &quot;</span>+name);<br>   &#125;<br></code></pre></td></tr></table></figure><p>第三方bean管理<br>使用@Bean配置第三方Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><span class="hljs-comment">//    1.定义方法获得需要管理的对象</span><br><span class="hljs-comment">//    2.添加@Bean 表示当前方法的返回值是个bean</span><br>    <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://locahost:3306/db1&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;hutao&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;20020509+&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将独立的配置类加入核心配置<br>方式一:导入式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>       <span class="hljs-comment">//配置..</span><br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用@Import注解手动加入配置类到核心配置，此注解value为数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>方式二:扫描式<br>使用@ComponentScan</p><p>第三方bean依赖注入<br>简单类型依赖注入<br>即直接使用成员变量代替<br><img src="https://img-blog.csdnimg.cn/8232bf86bbf54a798adc221064fee74f.png" alt="在这里插入图片描述"><br>引用类型依赖注入<br><img src="https://img-blog.csdnimg.cn/08cce6d5ab264dc0ab0b1dbc917459f5.png" alt="在这里插入图片描述">引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象</p><p>注解开发总结<br>XML配置比对注解配置<br><img src="https://img-blog.csdnimg.cn/68ca068be2474b09b5ac7596a168e53a.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/Spring%E5%AD%A6%E4%B9%A006/"/>
    <url>/2023/03/25/Spring%E5%AD%A6%E4%B9%A006/</url>
    
    <content type="html"><![CDATA[<p><strong>AOP切入点表达式</strong><br>切入点:要进行增强的方法<br>切入点表达式:要进行增强的方法的描述方式<br><img src="https://img-blog.csdnimg.cn/f51e4ba40f0e45c7819cf8b369483beb.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/eb77ad78261b4f8dae324300894a2fb4.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8d287fbe2ee749599d6a4c05bea68e00.png" alt="在这里插入图片描述"><br>AOP通知类型<br>●AOP通知描述了抽取的共性功能,根据共性功能抽取的位置不同,最终运行代码时要将其加入到合理的位置<br>●AOP通知共分为5种类型<br>■前置通知<br>■后置通知<br>■环绕通知(重点)<br>&#x2F;&#x2F;表示对原始操作的调用<br>需要加ProceedingJoinPoint 并调用proceed方法(此处会自动报错，因为它只管调用，不管你原来的执行是否会出错，所以需要自己抛出异常)<br>若原始操作无返回值，原始操作会正常执行<br>若有返回值，则需要用return返回<br>■返回后通知(了解)<br>■抛出异常后通知(了解)<br><img src="https://img-blog.csdnimg.cn/08e023fe1ccb48878b57a97664a0975a.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/d2cd2f92137544ffb4fa6fc92a663152.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/e97cf83500f2493e927e4b60c8d6cfbb.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/50dfa4d798c24909892516bd34b9308b.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/acd9e17130574369ac71cb878820df02.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/be6f5dbdebf24235a91929ae775be836.png" alt="在这里插入图片描述">案例:测量业务层接口万次执行效率<br><img src="https://img-blog.csdnimg.cn/23713a1baa6c4c788bd97a754f9372c8.png" alt="在这里插入图片描述"><br>AOP通知获取数据<br>●获取切入点方法的参数<br>■JoinPoint : 适用于前置、后置、返回后、抛出异常后通知<br>■ProceedJointPoint : 适用于环绕通知<br>●获取切入点方法返回值<br>■返回后通知<br>■环绕通知<br>●获取切入点方法运行异常信息<br>■抛出异常后通知<br>■环绕通知</p><p><img src="https://img-blog.csdnimg.cn/a3d2bc75c9c84aa0b69ccedb28446b2c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2071a5b9b6a94825a0b776c9ec5b730e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/35e56284164d4210a8c8ff7f73e81b9c.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring%E5%AD%A6%E4%B9%A005/"/>
    <url>/2023/03/25/spring%E5%AD%A6%E4%B9%A005/</url>
    
    <content type="html"><![CDATA[<p><strong>OOP</strong><br>OOP是面向对象编程,其本质是以建立模型体现出来的抽象思维过程和面向对象的方法。<br>OOP特征分别是封装、继承、多态<br>五大基本原则：单一职责原则SRP、开放封闭原则OCP、里式替换原则LSP、依赖倒置原则DIP、接口分离原则ISP<br>方法重写，方法重载</p><p><strong>AOP简介</strong><br>●AOP (Aspect Oriented Programming) 面向切面编程，一种编程范式,指导开发者如何组织程序结构<br>●作用 :在不惊动原始设计的基础上为其进行功能增强<br>●Spring理念:无入侵式&#x2F;无侵入式<br> <img src="https://img-blog.csdnimg.cn/952f70e286824ae48645c379d0d0fbb1.png" alt="在这里插入图片描述"><br>●连接点( JoinPoint ) :程序执行过程中的任意位置,粒度为执行方法、抛出异常、设置变量等<br>    ■在SpringAOP中,理解为方法的执行<br>●切入点( Pointcut ) :匹配连接点的式子<br>    ■在SpringAOP中 , -个切入点可以只描述一个具体方法,也可以匹配多个方法<br>    ◆一个具体方法: dao包下的BookDao接口中的无形参无返回值的save方法<br>    ◆匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法<br>●通知( Advice ) :在切入点处执行的操作,也就是共性功能<br>    ■在SpringAOP中,功能最终以方法的形式呈现<br>●通知类:定义通知的类<br>●切面( Aspect ) :描述通知与切入点的对应关系</p><p>入门案例<br>①:导入aop相关坐标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;<br>      &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">1.9</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>spring-context坐标依赖spring-aop坐标</p><p>②:定义dao接口与实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//记录程序当前执行执行（开始时间）</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//业务执行万次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//记录程序当前执行时间（结束时间）</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//计算时间差</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">totalTime</span> <span class="hljs-operator">=</span> endTime-startTime;<br>        <span class="hljs-comment">//输出信息</span><br>        System.out.println(<span class="hljs-string">&quot;执行万次消耗时间：&quot;</span> + totalTime + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao update ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao delete ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao select ...&quot;</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>③:定义通知类，制作通知<br><img src="https://img-blog.csdnimg.cn/7b0f3cc3ab7342b1b9ac2881b3947963.png"><br>④:定义切入点<br><img src="https://img-blog.csdnimg.cn/b6e94c0e19534fdcaadb3e587ce95520.png" alt="在这里插入图片描述">⑤:绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行位置</p><p> AOP工作流程<br> 1.Spring容器启动<br> 2.读取所有切面配置中的切入点<br> 3.初始化bean ,判定bean对应的类中的方法是否匹配到任意切入点<br>●匹配失败 ,创建对象<br>●匹配成功,创建原始对象(目标对象)的代理对象<br>4.获取bean执行方法<br>●获取bean ,调用方法并执行,完成操作<br>●获取的bean是代理对象时 ,根据代理对象的运行模式运行原始方法与增强的内容,完成操作</p><p>●目标对象( Target ) :原始功能去掉共性功能对应的类产性的对象,这种对象是无法直接完成最终工作的<br>●代理( Proxy ) :目标对象无法直接完成工作,需要对其进行功能回填,通过原始对象的代理对象实现</p><p>SpringAOP本质是代理模式</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/SpringMVC01/"/>
    <url>/2023/03/25/SpringMVC01/</url>
    
    <content type="html"><![CDATA[<p>SpringMVC概述<br>●SpringMVC是- -种基于Java实现MVC模型的轻量级Web框架<br>    ●优点<br>    ■使用简单，开发便捷(相比于Servlet)<br>    ■灵活性强</p><p>①:使用SpringMVC技术需要先导入SpringMVC坐标与Servlet坐标<br><img src="https://img-blog.csdnimg.cn/9264b7c53f4a473482bdc870ce339083.png" alt="在这里插入图片描述"><br>②:创建SpringMVC控制器类(等同于Servlet功能)<br><img src="https://img-blog.csdnimg.cn/d3f5b787f69a4e66acc66671541b169a.png" alt="在这里插入图片描述"><br>③:初始化SpringMVC环境(同Spring环境)，设定SpringMVC加载对应的bean<br><img src="https://img-blog.csdnimg.cn/30355eedf0d7425bb1d1e8888182e86a.png" alt="在这里插入图片描述"><br>④:初始化Servlet容器，加载SpringMVC环境,并设置SpringMVC技术处理的请求<br><img src="https://img-blog.csdnimg.cn/fd8dd012e6a44bc982ff941e25a01627.png" alt="在这里插入图片描述"><br>●名称: @RequestMapping<br>●类型: 方法注解<br>●位置: SpringMVC控制器方法定义.上方<br>●作用: 设置当前控制器方法请求访问路径<br>●范例:<br><img src="https://img-blog.csdnimg.cn/292843e2e719440fb79a2b64734b3e19.png" alt="在这里插入图片描述"></p><p>●相关属性<br>■value (默认) :请求访问路径</p><p>●名称: @ResponseBody<br>●类型:方法注解<br>●位置: SpringMVC控制器方法定义上方<br>●作用:设置当前控制器方法响应内容为当前返回值，无需解析<br>●范例:<br><img src="https://img-blog.csdnimg.cn/bf33fe92d79a470ea460084637b93899.png" alt="在这里插入图片描述"><br>●SpringMVC入i ]程序开发总结(1+N)<br>■一次性工作<br>    ◆创建工程, 设置服务器，加载工程<br>    ◆导入坐标<br>    ◆创建web容器启动类,加载SpringMVC配置, 并设置SpringMVC请求拦 截路径<br>    ◆SpringMVC核心配置类 (设置配置类,扫描controller包， 加载Controller控制器bean)<br>■多次工作<br>    ◆定义处理请求的控制器类<br>    ◆定义处理请求的控制器方法， 并配置映射路径(@RequestMapping)与返回json数据(@ResponseBody)</p><p>●AbstractDispatcherServletInitializer类 是Spr ingMVC提供的快速初始化Web3.0容器的抽象类<br>●AbstractDispatcherServletInitializer提供三个接口方法供用户实现<br>■createServletApplicationContext()方法， 创建Servlet容器时, 加载SpringMVC对应的bean并放入<br>WebApplicationContext对象范围中，而WebApplicat ionContext的作用范围为ServletContext范围，即整个web容器范围</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring07/"/>
    <url>/2023/03/25/spring07/</url>
    
    <content type="html"><![CDATA[<p>案例:百度网盘密码数据兼容处理<br><img src="https://img-blog.csdnimg.cn/d996ad98319c47a4b0195c849efe89f5.png" alt="在这里插入图片描述"><br>分析:<br>①:在业务方法执行之前对所有的输入参数进行格式处理一-trim()<br>②:使用处理后的参数调用原始方法——环绕通知中存在对原始方法的调用</p><p><img src="https://img-blog.csdnimg.cn/a91a043c31fd4d0c96aa25c88a52d728.png" alt="在这里插入图片描述"><br>AOP总结<br>●概念: AOP(Aspect Oriented Progr amming)面向切面编程，一种编程范式<br>●作用:在不惊动原始设计的基础上为方法进行功能增强<br>●核心概念<br>■代理( Proxy ) : SpringAOP的核心本质是采用代理模式实现的<br>■连接点( JoinPoint ) :在SpringAOP中 , 理解为任意方法的执行<br>■切入点( Pointcut ) :匹配连接点的式子,也是具有共性功能的方法描述<br>■通知( Advice ) :若干个方法的共性功能,在切入点处执行,最终体现为一个方法<br>■切面( Aspect ) : 描述通知与切入点的对应关系<br>■目标对象 ( Target ) : 被代理的原始对象成为目标对象</p><p>●切入点表达式标准格式 :动作关键字(访问修饰符返回值包名 .类&#x2F;接口名.方法名(参数)异常名)<br>    <img src="https://img-blog.csdnimg.cn/2e5272e94e764757afc83fb362952628.png" alt="■execution(*com.itheima.service.*Service.*(..))"><br>●切入点表达式描述通配符 :<br>    ■ 作用:用于快速描述,范围描述<br>    ■ *：匹配任意符号(常用)<br>    ■ ..:匹配多个连续的任意符号(常用)<br>    ■ + :匹配子类类型</p><p>●通知类型<br>    ■前置通知<br>    ■后置通知<br>    ■环绕通知( 重点)<br>        ◆环绕通知依赖形 参ProceedingJoinPoint才能实现对原始方法的调用<br>        ◆环绕通 知可以隔离原始方法的调用执行<br>        ◆环绕通 知返回值设置为0bject类型<br>        ◆环绕通 知中可以对原始方法调用过程中出现的异常进行处理<br>■返回后通知<br>■抛出异常后通知</p><p>●获取切入点方法的参数<br>    ■JoinPoint :适用于前置、后置、返回后、抛出异常后通知,设置为方法的第一个形参<br>    ■ProceedJointPoint:适用于环绕通知<br>●获取切入点方法返回值<br>    ■返回后通知<br>    ■环绕通知<br>●获取切入点方法运行异常信息<br>    ■抛出异常后通知<br>    ■环绕通知</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/spring08/"/>
    <url>/2023/03/25/spring08/</url>
    
    <content type="html"><![CDATA[<p>Spring事务简介<br>    ●事务作用 :在数据层保障一系列的数据库操作同成功同失败<br>    ●Spring事务作用 :在数据层或业务层保障一系列的数据库操作同成功同失败<br>    <img src="https://img-blog.csdnimg.cn/8a3975fbdce047018fe539a900d167ab.png" alt="在这里插入图片描述"><br>案例::银行账户转账<br><img src="https://img-blog.csdnimg.cn/54d88580ec374e4db4678cc7f82a4619.png" alt="在这里插入图片描述"><br>注意事项<br>Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中,降低耦合<br>注解式事务可以添加到业务方法上表示当前方法开启事务,也可以添加到接口.上表示当前接口所有方法开启事务<br><img src="https://img-blog.csdnimg.cn/9509181c1e004bff8b3cbdbf5e6f6f57.png" alt="在这里插入图片描述"><br>注意事项<br>事务管理器要根据实现技术进行选择<br>MyBatis框架使用的是JDBC事务<br><img src="https://img-blog.csdnimg.cn/d2c664acd808495580e2955af3f4706b.png" alt="在这里插入图片描述"></p><p>Spirng事务角色<br>■事务管理员 :发起事务方,在Spring中通常指代业务层开启事务的方法<br>■事务协调员 :加入事务方,在Spring中通常指代数据层方法,也可以是业务层方法</p><p>案例:转账业务追加日志<br>事务相关配置<br><img src="https://img-blog.csdnimg.cn/451ad090544b4014984ce7c50092d90a.png" alt="在这里插入图片描述"><br>事务传播行为: 事务协调员对事务管理员所携带事务的处理态度<br><img src="https://img-blog.csdnimg.cn/6ae32d0c8c1c4d2c81e1066dff63d691.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/SpringMVC02/"/>
    <url>/2023/03/25/SpringMVC02/</url>
    
    <content type="html"><![CDATA[<p>入门案例工作流程分析<br>●启动服务器初始化过程<br>1.服务器启动，执行ServletContainersInitConfig类, 初始化web容器<br>2.执行createServletApplicationContext方法， 创建了WebApplicationContext对象<br>3.加载SpringMvcConfig<br>4.执行@ComponentScan加载对应的bean<br>5.加载UserController, 每个@RequestMapping的名称对应一个具体的方法<br>6.执行getServletMappings方法, 定义所有的请求都通过SpringMVC<br>●单次请求过程<br>1.发送请求localhost&#x2F;save<br>2. web容器发现所有请求都经过SpringMVC, 将请求交给SpringMVC处理<br>3.解析请求路径&#x2F;save<br>4.由&#x2F;save匹配执行对应的方法save()<br>5.执行save()<br>6.检测到有@ResponseBody 直接将save( )方法的返回值作为响应求体返回给请求方<br><img src="https://img-blog.csdnimg.cn/e475823904b34ea7891d04372afb21b4.png" alt="在这里插入图片描述"></p><p><strong>Controller加载控制与业务bean加载控制</strong><br>●SpringMVC相关bean (表现层bean)<br>●Spring控制的bean<br>    ●业务bean (Service)<br>    ●功能bean (DataSource等)</p><p>●SpringMVC相关bean加载控制<br>●SpringMVC加载的bean对应的包均在com. itheima. controller包内<br>●Spring相关bean加载控制<br>●方式一: Spring加载的bean设定扫描范围为com. itheima,排除掉controller包内的bean<br>●方式二: Spring加载的bean设定扫描范围为精准范围，例如service包、 dao包等<br>●方式三:不区分Spring与SpringMVC的环境,加载到同-一个环境中</p><p><img src="https://img-blog.csdnimg.cn/8cf9ee37d72d479abbf8a1b02667f0f0.png" alt="在这里插入图片描述"><br>PostMan简介<br>●Postman是一 -款功能强大的网页调试与发送网页HTTP请求的Chrome插件<br>●作用:常用于进行接口测试<br>●特征<br>    ■简单<br>    ■实用<br>    ■美观<br>    ■大方<br>PostMan基本使用<br>●注册登录<br>●创建工作空间&#x2F;进入工作空间<br>●发起请求测试结果</p><p>请求映射路径<br><img src="https://img-blog.csdnimg.cn/d285430202db47eb90e4469f7a813222.png" alt="在这里插入图片描述"><br>请求参数<br><img src="https://img-blog.csdnimg.cn/80115d9b330846cb86076b6ebde916b9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a39f16c820b94525bedc072aedc23ebc.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7d0aeeaf760445d28e0aaac996decdee.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/070bbbdda5bb43a0a03d8073a711685a.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/%E5%8A%9B%E6%89%A3/"/>
    <url>/2023/03/25/%E5%8A%9B%E6%89%A3/</url>
    
    <content type="html"><![CDATA[<p>1.两数之和<br>题目:给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> n=nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span>i+<span class="hljs-number">1</span>;j&lt;n;++j)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i]+nums[j]==target)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i,j&#125;;<span class="hljs-comment">//返回由i和j组成的数组</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<span class="hljs-comment">//返回一个无效值</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//嵌套，遍历每一组可得  若无或者有多对 则返回无效值</span><br></code></pre></td></tr></table></figure><p>9.回文数</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/SpringMVC03/"/>
    <url>/2023/03/25/SpringMVC03/</url>
    
    <content type="html"><![CDATA[<p>接收请求中json数据<br><img src="https://img-blog.csdnimg.cn/d82e59abe2ed44a0bf5e3222ea2cc9e8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ed7ebc96c08449bca7940895a3aa7013.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/ddbdc98c4d3948f69ab7be2e6dd3f6ee.png" alt="在这里插入图片描述"></p><p>注意:@EnableWebMvc注解功能强大，该注解整合了多个功能，此处仅使用其中一部分功能， 即json数据进行自动类型转换</p><p><img src="https://img-blog.csdnimg.cn/69700c359580421797742c235a3f5a36.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2de035dd0d5040ce90c4cfa69471c44a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/101e1d84dcdb42e8ab171b57721a47f8.png" alt="在这里插入图片描述"><br>@RequestBody与@RequestParam区别<br>●区别<br>    ●@RequestParam用于接收ur1地址传参，表单传参[application&#x2F;x-WWW- form-urlencoded ]<br>    ●@RequestBody用于接收json数据 [ application&#x2F;json]<br>●应用<br>    ●后期开发中， 发送json格式数据为主, @RequestBody应用较广<br>    ●如果发送非json格式数据，选用@RequestParam接收请求参数</p><p><img src="https://img-blog.csdnimg.cn/110f0587807f4f599c8734ee0fdb2800.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bb31dc8792ef4cda8ac129f874e0e128.png" alt="在这里插入图片描述"><br><strong>响应</strong></p><p>●响应页面<br>●响应数据<br>    ■文本数据<br>    ■json数剧<br><img src="https://img-blog.csdnimg.cn/6f6a42d7c14d477da5386646799fbdad.png" alt="在这里插入图片描述"><br>依赖于<br><img src="https://img-blog.csdnimg.cn/94946b13ea0e48d89a997865d7c7e2e5.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/25/SpringMVC04/"/>
    <url>/2023/03/25/SpringMVC04/</url>
    
    <content type="html"><![CDATA[<p><strong>REST风格</strong><br>REST简介<br>●REST (Representational State Transfer) ， 表现形式状态转换<br>■传统风格资源描述形式<br>    <a href="http://localhost/user/">http://localhost/user/</a> getById?id&#x3D;1<br>    <a href="http://localhost/user/">http://localhost/user/</a> saveUser<br>■REST风格描述形式<br>    <a href="http://localhost/user/1">http://localhost/user/1</a><br>    <a href="http://localhost/user">http://localhost/user</a><br>●优点:<br>    ■隐藏资源的访问行为， 无法通过地址得知对资源是何种操作<br>    ■书写简化</p><p>●按照REST风格访问资源时使用行为动作区分对资源进行 了何种操作<br>    ■ <a href="http://localhost/users">http://localhost/users</a>查询全部用户信息GET (查询)<br>    ■<a href="http://localhost/users/1">http://localhost/users/1</a>查询指定用户信息GET (查询)<br>    ■<a href="http://localhost/users">http://localhost/users</a>添加用户信息POST (新增&#x2F;保存)<br>    ■<a href="http://localhost/users">http://localhost/users</a>修改用户信息PUT (修改&#x2F;更新)<br>    ■<a href="http://localhost/users/1">http://localhost/users/1</a>删除用户信息DELETE (删除)<br>●根据REST风格对资源进行访问称为RESTful</p><p>步骤:<br><img src="https://img-blog.csdnimg.cn/2ac44b37a73646a3a0cbf20487d7ab19.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/08cfae0b07ce4675965fbe3728e3b02f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e8ea757469294615ba3e30f1d947eb3f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/87f0e3c550404d9683292df490b67901.png" alt="在这里插入图片描述"><br>@RequestBody @RequestParam @PathVariable<br>●区别<br>■@RequestParam用于接收ur1地址传参或表单传参<br>■@RequestBody用于接收json数据<br>■@PathVariable用于接收路径参数， 使用{参数名称}描述路径参数<br>●应用<br>■后期开发中，发送请求参数超过1个时，以json格式为主, @RequestBody应用较广<br>■如果发送非j son格式数据,选用@RequestParam接收请求参数<br>■采用RESTfu1进行开发，当参数数量较少时，例如1个， 可以采用@PathVariable接收请求路径变量,通常用于传递id值</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<hr><p>title: 我的第一篇博客文章<br>date: 2023-03-24 00:31:40<br>tags:<br><strong>REST风格</strong><br>REST简介<br>●REST (Representational State Transfer) ， 表现形式状态转换<br>■传统风格资源描述形式<br>    <a href="http://localhost/user/">http://localhost/user/</a> getById?id&#x3D;1<br>    <a href="http://localhost/user/">http://localhost/user/</a> saveUser<br>■REST风格描述形式<br>    <a href="http://localhost/user/1">http://localhost/user/1</a><br>    <a href="http://localhost/user">http://localhost/user</a><br>●优点:<br>    ■隐藏资源的访问行为， 无法通过地址得知对资源是何种操作<br>    ■书写简化</p><p>●按照REST风格访问资源时使用行为动作区分对资源进行 了何种操作<br>    ■ <a href="http://localhost/users">http://localhost/users</a>查询全部用户信息GET (查询)<br>    ■<a href="http://localhost/users/1">http://localhost/users/1</a>查询指定用户信息GET (查询)<br>    ■<a href="http://localhost/users">http://localhost/users</a>添加用户信息POST (新增&#x2F;保存)<br>    ■<a href="http://localhost/users">http://localhost/users</a>修改用户信息PUT (修改&#x2F;更新)<br>    ■<a href="http://localhost/users/1">http://localhost/users/1</a>删除用户信息DELETE (删除)<br>●根据REST风格对资源进行访问称为RESTful</p><p>步骤:<br><img src="https://img-blog.csdnimg.cn/2ac44b37a73646a3a0cbf20487d7ab19.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/08cfae0b07ce4675965fbe3728e3b02f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e8ea757469294615ba3e30f1d947eb3f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/87f0e3c550404d9683292df490b67901.png" alt="在这里插入图片描述"><br>@RequestBody @RequestParam @PathVariable<br>●区别<br>■@RequestParam用于接收ur1地址传参或表单传参<br>■@RequestBody用于接收json数据<br>■@PathVariable用于接收路径参数， 使用{参数名称}描述路径参数<br>●应用<br>■后期开发中，发送请求参数超过1个时，以json格式为主, @RequestBody应用较广<br>■如果发送非j son格式数据,选用@RequestParam接收请求参数<br>■采用RESTfu1进行开发，当参数数量较少时，例如1个， 可以采用@PathVariable接收请求路径变量,通常用于传递id值</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/23/hello-world/"/>
    <url>/2023/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
